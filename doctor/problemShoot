
问题排查
    0.注意从 多维度 验证自己的判断，找到本质错误
    
    1.业务问题：重现 -本地环境 - 代码debug - 分析 - 验证
				            线上环境  - 远程debug
				   			-  arthas对参数流程+日志 

			--- 业务问题依赖对流程/代码的熟悉程度


		2.性能
				1.各个指标含义及命令组合
						1.问题拆分决策树.png 
						2.全局到定向.png      从cpu - memory - disk - network维度列出各个指标
						3.监控命令
								1.监控命令.png 
								2.各个监控命令局限性及组合.png
						4.瓶颈判断 - os - 模块 - 监控命令
								1.cpu   常见：us(用户占用) - wa(io占用) - sy(系统) - si(软中断) - hi(硬盘)  不常见：ni(nice值) - st(虚拟服务器占用)        
										1.参考top命令指南：https://www.cnblogs.com/makelu/p/11169270.html
										2.cpu问题排查流程.png  --定位到具体进程  - 线程 - java工具 - 代码 / 配置
										3.top命令后进程的cpu占用是否有进程占用100% 或者更高

										4.Linux查看物理CPU个数、核数、逻辑CPU个数

											# 查看物理CPU个数
											cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l

											# 查看每个物理CPU中core的个数(即核数)
											cat /proc/cpuinfo| grep "cpu cores"| uniq

											# 查看逻辑CPU的个数
											cat /proc/cpuinfo| grep "processor"| wc -l

								2.memory
										1.关键看：avail，包含了free . tatal = avail + used ，avail 包含了buff/cache中可用和free 
										          totol 表示总内存，free 表示没使用过的内容，used是已经使用的内存。buff表示用于读写磁盘缓存的内存，cache表示用于读写文件缓存的内存。avail表示可用的应用内存。
										2.Swap原理是把一块磁盘空间或者一个本地文件当成内存来使用。Swap total表示能用的swap总量，swap free表示剩余，used表示已经使用的。这三个值都为0表示系统关闭了swap功能，由于演示环境是一台虚拟机，虚拟机一般都关闭swap功能。

										如何查看linux 系统内存大小的信息，可以查看总内存，剩余内存，可使用内存等信息  
										cat /proc/meminfo  信息Dirty  hugePage directMap1g ...

								3.thread 
										1.VIRT 进程使用的虚拟内存
											RES 进程使用的物理内存（不包括共享内存）
											MEM 进程使用的内存占比
										2.查看java进程及参数
											jps
											jinfo -flags pid 

										3.jdk自带工具  ： https://www.cnblogs.com/z-sm/p/6745375.html
										4.arthas 
								4.io
										1.iocall简图.png 
										2.Linux IO实时监控iostat命令详解  : https://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858810.html
											 常用参数： rrqm/s：每秒这个设备相关的读取请求有多少被Merge了
											           avgqu-sz 是平均请求队列的长度。毫无疑问，队列长度越短越好。
											           await：  每一个IO请求的处理的平均时间（单位是微秒毫秒）。这里可以理解为IO的响应时间，一般地系统IO响应时间应该低于5ms，如果大于10ms就比较大了。
																         这个时间包括了队列时间和服务时间，也就是说，一般情况下，await大于svctm，它们的差值越小，则说明队列时间越短，反之差值越大，队列时间越长，说明系统出了问题。
																svctm    表示平均每次设备I/O操作的服务时间（以毫秒为单位）。如果svctm的值与await很接近，表示几乎没有I/O等待，磁盘性能很好，如果await的值远高于svctm的值，则表示I/O队列等待太长，         系统上运行的应用程序将变慢。
																%util： 在统计时间内所有处理IO时间，除以总共统计时间。例如，如果统计间隔1秒，该设备有0.8秒在处理IO，而0.2秒闲置，那么该设备的%util = 0.8/1 = 80%，所以该参数暗示了设备的繁忙程度
																一般地，如果该参数是100%表示设备已经接近满负荷运行了（当然如果是多磁盘，即使%util是100%，因为磁盘的并发能力，所以磁盘使用未必就到了瓶颈）。

												可以看到磁盘的平均响应时间<5ms，磁盘使用率>80。磁盘响应正常，但是已经很繁忙了。
												IO/s = r/s + w/s = 18.33+114.33 = 132.66
								5.net 
										1.netstat -a 
										  该命令state表示：listener - establish :https://blog.csdn.net/klzyf100/article/details/78811685
										  一个是Active Internet connections，称为有源TCP连接，其中"Recv-Q"和"Send-Q"指%0A的是接收队列和发送队列。这些数字一般都应该是0。如果不是则表示软件包正在队列中堆积。这种情况只能在非常少的情况见到。

										  网卡把数据接过来，经过队列、环形缓冲区，再经过传输层，最后通过tcp_rmem给到应 用。

										2.网络queue定位谁的问题.png  服务端 - 接收端 - 网络
										  上面没有问题还有可能是网络参数问题：网络参数导致丢包.png 
										3.三次握手-四次挥手
										4.time-wait一般无需手动处理，除了，只有一种情况要处理TIME_WAIT，那就是端口不够用的时。65535
											
											一个 TCP 连接大概占 3KB，创建 10 万个连接，才100000x3KB≈300M左右，何况最多才 65535 呢？服务器有那么穷吗？.不会因为端口耗尽内存资源



								6.system
										1.vmstat r:表示运行队列  当这个值超过了CPU数目，就会出现CPU瓶颈了。这个也和top的负载有关系，一般负载超过了3就比较高，超过了5就高，超过了10就不正常了
										2.常用参数：si  每秒从磁盘读入虚拟内存的大小，如果这个值大于0，表示物理内存不够用或者内存泄露了，要查找耗内存进程解决掉。我的机器内存充裕，一切正常。
											so  每秒虚拟内存写入磁盘的大小，如果这个值大于0，同上。
											bi  块设备每秒接收的块数量，这里的块设备是指系统上所有的磁盘和其他块设备，默认块大小是1024byte，我本机上没什么IO操作，所以一直是0，但是我曾在处理拷贝大量数据(2-3T)的机器上看过可以达到140000/s，磁盘写入速度差不多140M每秒
											bo 块设备每秒发送的块数量，例如我们读取文件，bo就要大于0。bi和bo一般都要接近0，不然就是IO过于频繁，需要调整。
											参考：https://www.cnblogs.com/ggjucheng/archive/2012/01/05/2312625.html
											
										3.显然是由于in引起的cs，CPU 队列那么高也是由in导致的。

								7. swap
										1.sysctl -a|grep swappiness  sysctl -a|grep vm.min_free_kbytes查看发生swap的上限

										当操作系统中配置了vm.swappiness是 30%，那么当内存用到1-30%=70%的 时候，就会发生 Swap。

										2.vmstat中的si /so 指的就是系统的swap.通常为0，因为开启swap肯定会造成性能损失


								8.应用层

										参考：JDK工具（查看JVM参数、内存使用情况及分析等） ： https://www.cnblogs.com/z-sm/p/6745375.html
											  线上CPU飙升100%问题排查，一篇足矣		   ：https://www.cnblogs.com/dennyzhangdd/p/11585971.html
											  参考：20丨Java & C ++：代码级监控及常用计数器解析（下） 
											  
										0.什么时候触发GC:
												1.常用的GC策略，什么时候会触发YGC，什么时候触发FGC？:https://blog.csdn.net/ITzhangdaopin/article/details/78737641

										1.代码级分析流程.png 
												1.执行“top”命令：查看所有进程占系统CPU的排序。极大可能排第一个的就是咱们的java进程（COMMAND列）。PID那一列就是进程号。或者jps -l 查看
												2.执行“top -Hp 进程号”命令：查看java进程下的所有线程占CPU的情况。  
												3.执行“printf "%x\n" 10命令 ：后续查看线程堆栈信息展示的都是十六进制，为了找到咱们的线程堆栈信息，咱们需要把线程号转成16进制。例如,printf "%x\n 10-》打印：a，那么在jstack中线程号就是0xa.
												4.执行 “jstack 进程号 | grep 线程ID”  查找某进程下-》线程ID（jstack堆栈信息中的nid）=0xa的线程状态。如果“"VM Thread" os_prio=0 tid=0x00007f871806e000 nid=0xa runnable”，第一个双引号圈起来的就是线程名，如果是“VM Thread”这就是虚拟机GC回收线程了
														或者jstack 进程号 >> a.txt 

														线程快照是当前java虚拟机每一条线程正在执行的方法堆栈的集合，生成线程快照的主要目的是用于定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致长时间等待。


														关注点：jstack简单使用，定位死循环、线程阻塞、死锁等问题 ： https://blog.csdn.net/jeffleo/article/details/75799146


												5.执行“jstat -gcutil 进程号 统计间隔毫秒 统计次数（缺省代表一致统计）”，查看某进程GC持续变化情况，如果发现返回中FGC很大且一直增大-》确认Full GC! 也可以使用“jmap -heap 进程ID”查看一下进程的堆内从是不是要溢出了，特别是老年代内从使用情况一般是达到阈值(具体看垃圾回收器和启动时配置的阈值)就会进程Full GC。
														主要是对java应用程序的资源和性能进行实时的命令行监控，包括了对heap size和垃圾回收状况的监控。
														1、jstat -gc PID 5000 20

														2.gc的规则： jstat命令查看jvm的GC情况 ：https://www.cnblogs.com/yjd_hycf_space/p/7755633.html



												6.执行“jmap -dump:format=b,file=filename 进程ID”，导出某进程下内存heap输出到文件中。可以通过eclipse的mat工具查看内存中有哪些对象比较多,飞机票：Eclipse Memory Analyzer（MAT），内存泄漏插件，安装使用一条龙；

														堆Dump是反映堆使用情况的内存镜像，其中主要包括系统信息、虚拟机属性、完整的线程Dump、所有类和对象的状态等。一般在内存不足，GC异常等情况下，我们会去怀疑内存泄漏，这个时候就会去打印堆Dump。

														jmap pid 
														jmap -heap pid 查看堆使用情况
														jmap -histo pid 查看堆中对象数量和大小
														jmap -dump:format=b,file=heapdump pid：将内存使用的详细情况输出到文件
															jhat -port 4000 文件名 ，在浏览器中访问http:localhost:4000/

												7.分析问题
														cpu 100%通常原因：https://www.cnblogs.com/dennyzhangdd/p/11585971.html
														

												8.动态更改
														1.jinfo可以用来查看正在运行的java运用程序的扩展参数，甚至支持在运行时动态地更改部分参数。
														2.参数含义：jvm 性能调优工具之 jinfo ： https://www.jianshu.com/p/8d8aef212b25
														           JVM参数汇总 ： https://www.cnblogs.com/duanxz/p/3482366.html


												9.如果条件可以使用可视化监控工具（JConsole、JVisualVM）动态监控 

														1.JVM调优之JConsole和JVisualVM工具使用 : https://blog.csdn.net/moneyshi/article/details/81511687
												
												10.arthas ognl表达式
														1.
															使用场景：
															    程序在稳定运行了，可是实现的功能点了没反应。
															    为了修复 Bug 而上线的新版本，上线后发现 Bug 依然在，却想不通哪里有问题？
															    想到可能出现问题的地方，却发现那里没打日志，没法在运行中看到问题，只能加了日志输出重新打包——部署——上线
															    程序功能正常了，可是为啥响应时间这么慢，在哪里出现了问题？
															    程序不但稳定运行，而且功能完美，但跑了几天或者几周过后，发现响应速度变慢了，是不是内存泄漏了？

														dashboard

														sc -d com.xx.SelfCheck   === 查看加载情况
														jad --source-only  com.xxSelfCheck healthCheck == 查看是否最新代码和预期 类和方法都可以反编译




														watch com.xxx.类名 healthCheck '{params[0],returnObj.getData.toString()}'
														这里类似于就是返回对象的调用即可


														trace com.xxxMetrics metricsSelfCheck  == 一层一层的进去查看，结合代码

														tt -t com.xx.SelfCheck  healthCheck  == 会记录下每一次的调用
														tt -i 上面的序号

														monitor可以对某个类的某个方法进行周期性监控，来输出方法的平均响应时间，成功失败次数，调用次数等。
														monitor -c 3 com.xxx.SelfCheck  healthCheck



														thread : 展示线程信息，线程堆栈信息，相当于复合了定位进程 - 线程 - jstack三个操作
														thread -n 5 
														thread -b  引发死锁的问题，卡住整个线程执行，


														ognl 运行时的数据，但有时需要动态的查看数据，或者数据过多，需要动态筛选，比较复杂的规则就需要靠OGNL了
														1.可以配合上面的命令进行加强
														2.命令之ognl使用姿势  https://blog.csdn.net/u010634066/article/details/101013479
														3.arthas使用ognl修改线上动态对象（实例）的属性值   https://blog.csdn.net/sumengnan/article/details/110123910
														4.https://aijishu.com/a/1060000000126746






												==========引入jvm相关东西  : https://github.com/doocs/jvm
													1.gc的规则：	- 性能
															1.分区： 不同的区域存放不同生命周期的对象，这样可以根据不同的区域使用不同的垃圾回收算法，更具有针对性。
															2.虚拟机在解析.class文件时，若遇到一条 new 指令，首先它会去检查常量池中是否有这个类的符号引用，并且检查这个符号引用所代表的类是否已被加载、解析和初始化过。如果没有，那么必须先执行相应的类加载过程。
															  为新生对象分配内存
															  初始化
															3.垃圾回收机制  -- 抽象逻辑，只是为了从生命 周期/大小 维度进行分类清理
																1.标记-清除算法
																2.复制算法（新生代） Eden、From Survivor、To Survivor，比例是 8:1:1，每次使用 Eden 和其中一块 Survivor。回收时，将 Eden 和 Survivor 中还存活的对象一次性复制到另外一块 Survivor 空间上，最后清理掉 Eden 和刚才使用的 Survivor 空间。这样只有 10% 的内存被浪费。
																					但是我们无法保证每次回收都只有不多于 10% 的对象存活，当 Survivor 空间不够，需要依赖其他内存（指老年代）进行分配担保。
																3.标记整理

																分代收集算法
																根据对象存活周期的不同，将内存划分为几块。一般是把 Java 堆分为新生代和老年代，针对各个年代的特点采用最适当的收集算法。
																		新生代：复制算法
																		老年代：标记-清除算法、标记-整理算法
															4.回收器
																1.新生代垃圾收集器
																		1.Serial 垃圾收集器（单线程）
																		2.ParNew 垃圾收集器（多线程）			   追求降低用户停顿时间，适合交互式应用。
																		3.Parallel Scavenge 垃圾收集器（多线程） 追求 CPU 吞吐量，能够在较短时间内完成指定任务，因此适合没有交互的后台计算。
																2.老年代垃圾收集器
																		1.Serial Old 垃圾收集器（单线程）
																		2.Parallel Old 垃圾收集器（多线程）
																		3.CMS 垃圾收集器 Concurrent Mark Sweep	--- 更细粒度的划分和设计
																				初始标记：Stop The World，仅使用一条初始标记线程对所有与 GC Roots 直接关联的对象进行标记。
																				并发标记：使用多条标记线程，与用户线程并发执行。此过程进行可达性分析，标记出所有废弃对象。速度很慢。
																				重新标记：Stop The World，使用多条标记线程并发执行，将刚才并发标记过程中新出现的废弃对象标记出来。
																				并发清除：只使用一条 GC 线程，与用户线程并发执行，清除刚才标记的对象。这个过程非常耗时。
																				并发标记与并发清除过程耗时最长，且可以与用户线程一起工作，因此，总体上说，CMS 收集器的内存回收过程是与用户线程一起并发执行的。

																				有参数设定多次清理后进行压缩整理
																		4.G1 :G1 是一款面向服务端应用的垃圾收集器，它没有新生代和老年代的概念，而是将堆划分为一块块独立的 Region。当要进行垃圾收集时，首先估计每个 Region 中垃圾的数量，每次都从垃圾回收价值最大的 Region 开始回收，因此可以获得最大的回收效率。
																		 从整体上看， G1 是基于“标记-整理”算法实现的收集器，从局部（两个 Region 之间）上看是基于“复制”算法实现的，这意味着运行期间不会产生内存空间碎片。

															5.内存分配与回收 
																1.15次回收升级到老年带
																2.https://github.com/doocs/jvm/blob/main/docs/05-memory-allocation-gc.md




													2.内存保障 - 并发
															1.happen-before
															2.重排


													3.类加载 双亲委派 - 执行流程 顺序
															1.类的生命周期
																加载
																验证
																准备
																解析
																初始化  : 几种手段对比
																使用
																卸载
															2.为什么使用双亲委派模型
																像 java.lang.Object 这些存放在 rt.jar 中的类，无论使用哪个类加载器加载，最终都会委派给最顶端的启动类加载器加载，从而使得不同加载器加载的 Object 类都是同一个。
																相反，如果没有使用双亲委派模型，由各个类加载器自行去加载的话，如果用户自己编写了一个称为 java.lang.Object 的类，并放在 classpath 下，那么系统将会出现多个不同的 Object 类，Java 类型体系中最基础的行为也就无法保证。





								9.中间件
									1.tomcat
									2.kafka





				2.指标结合分析，多维度论证
				3.







