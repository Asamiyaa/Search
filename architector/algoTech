
数据结构和算法
		

算法数据结构网站 https://visualgo.net/

		1.为什么很多编程语言中数组都从0开始编号
				1.是什么
						1.数组（Array）是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据
								1.线性表就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。其实除了数组，链表、队列、栈等也是线性表结构。
								  而与它相对立的概念是非线性表，比如二叉树、堆、图等。之所以叫非线性，是因为，在非线性表中，数据之间并不是简单的前后关系。
								2.连续的内存空间和相同类型的数据  -- 随机访问
						2.数据结构和算法
								1.数组是适合查找操作，但是查找的时间复杂度并不为O(1)。即便是排好序的数组，你用 ‘ 二分查找 ’ - 算法，时间复杂度也是 O(logn)。所以，正确的表述应该是，数组支持随机访问，根据 ‘ 下标随机访问的时间复杂度为 O(1) ’ 。
								2.插入耗时 : 直接插入新数据到末尾  --> 插入数据到指定位置将原数据挪到末尾 --> 插入数据到指定位置后续元素依次向后移动
								3.平均复杂度
								4.删除耗时：打标 ，批量删除 。 当数组没有更多空间存储数据时，我们再触发执行一次真正的删除操作，这样就大大减少了删除操作导致的数据搬移。

									==> JVM 标记清除垃圾回收算法 , 很多时候我们并不是要去死记硬背某个数据结构或者算法，而是要学习它背后的思想和处理技巧，这些东西才是最有价值的。如果你细心留意，不管是在软件开发还是架构设计中，总能找到某些算法和数据结构的影子
						3.边界
								1.数组越界：很多计算机病毒也正是利用到了代码中的数组越界可以访问非法地址的漏洞，来攻击系统，所以写代码的时候一定要警惕数组越界。j
		        2.操作
		        		1.数组和arrayList 
		        				1.容器封装了细节比如动态扩容，提供更灵活的api；但 ‘ 事先指定数据大小 ’ 可以省掉很多次内存申请和数据搬移操作
		        					否则要是数据很大，1g - 1.5g 要先复制...
		        				2.使用数组而不是容器场景
		        					1.Java ArrayList 无法存储基本类型，比如 int、long，需要封装为 Integer、Long 类，而Autoboxing、Unboxing 则有一定的性能消耗，所以如果特别关注性能，或者希望使用基本类型，就可以选用数组。
		        					2.如果数据大小事先已知，并且对数据的操作非常简单，用不到 ArrayList 提供的大部分方法，也可以直接使用数组。
		        					3.还有一个是我个人的喜好，当要表示多维数组时，用数组往往会更加直观。比如Object[][] array；而用容器的话则需要这样定义：ArrayList<ArrayList > array。我总结一下，对于业务开发，直接使用容器就足够了，省时省力。毕竟损耗一丢丢性能，完全不会影响到系统整体的性能。但如果你是做一些非常底层的开发，比如开发网络框架，性能的优化需要做到极致，这个时候数组就会优于容器，成为首选

				3.为什么从0开始
						从数组存储的内存模型上来看，“下标”最确切的定义应该是“偏移（offset） ，a[k]_address = base_address + k * type_size 而无需 a[k]_address = base_address + (k-1)*type_size； 对于 CPU 来说，就是多了一次减法指令。


		2.链表  如何实现LRU缓存淘汰算法
				1.缓存三种策略： 策略有三种：先进先出策略 FIFO（First In，FirstOut）、最少使用策略 LFU（Least Frequently Used）、最近最少使用策略 LRU（LeastRecently Used）
				2.单向链表 - 双向链表 - 循环链表( 环 )== mysql中的redolog / 分布式中的ring
						当要处理的数据具有环型结构特点时，就特别适合采用循环链表。比如著名的约瑟夫问题

						==> 根据事物/数据特点进行抽象

						双向链表更高效：
								1.删除操作  
										1.分两种情况 1. 删除结点中“值等于某个给定值”的结点；2.删除给定指针指向的结点；二者都需要先 ‘ 查询 ’，在删除操作。尽管单纯的删除操作时间复杂度是 O(1)，但遍历查找的时间是主要的耗时点，对应的时间复杂度为 O(n)
										            对于第二种情况；如果是双向链表可以直接获取他的前驱元素；o(1)就可以完后

							    2.添加操作
							    		1.同删除操作一样
							    3.查询
							    		1.双向链表的按值查询的效率也要比单链表高一些。因为，我们可以记录上次查找的位置 p，每次查询时，根据要查找的值与 p的大小关系，决定是往前还是往后查找，所以平均只需要查找一半的数据。
						==> LinkedList 使用了双向链表

						==> 时间空间取舍 


				3.如何判断回文
						1.快慢指针找中间节点	
								1 快慢指针定位中间节点（这里要区分奇偶情况）1.1 奇数情况，中点位置不需要矫正1.2 偶数情况，使用偶数定位中点策略，要确定是返回上中位数或下中位数1.2.1 如果是返回上中位数，后半部分串头取next1.2.2 如果是返回下中位数，后半部分串头既是当前节点位置，但前半部分串尾要删除掉..
						2.栈法
								1.弹栈 = 逆序 ；再进行比较 

				4.写链表的坑
						1.理解指针或引用的含义 			 将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量
						2.警惕指针丢失和内存泄漏			 插入结点时，一定要注意操作的顺序；避免丢失
						3.利用哨兵简化实现难度			 针对链表的插入、删除操作，需要对插入第一个结点和删除最后一个结点的情况进行特殊处理。在任何时候，不管链表是不是空，head 指针都会一直指向这个哨兵结点。我们也把这种有哨兵结点的链表叫带头链表。因为哨兵结点一直存在，所以插入第一个结点和插入其他结点，删除最后一个结点和删除其他结点，都可以统一为相同的代码实现逻辑了。
														 利用哨兵简化编程难度的技巧，在很多代码实现中都有用到，比如插入排序、归并排序、动态规划等。
														 可以省略 i<n，不要小看这一条语句，当累积执行万次、几十万次时，累积的时间就很明显了。消耗

						 		==> 当然，这只是为了举例说明哨兵的作用，你写代码的时候千万不要写第二段那样的代码，因为可读性太差了。大部分情况下，我们并不需要如此追求极致的性能。

						4.重点留意边界条件处理
								如果链表为空时，代码是否能正常工作？
								如果链表只包含一个结点时，代码是否能正常工作？
								如果链表只包含两个结点时，代码是否能正常工作？
								代码逻辑在处理头结点和尾结点的时候，是否能正常工作？
						5.举例画图，辅助思考
								1.举例法和画图法。 把它画在纸上，释放一些脑容量，留更多的给逻辑思考，这样就会感觉到思路清晰很多。  画图思考.png 
						6.多写多练，没有捷径
								1.单链表反转
								2.链表中环的检测
								3.两个有序的链表合并删除
								4.链表倒数第 n 个结点
								5.求链表的中间结点

								==> 链表代码写得好坏，可以看出一个人写代码是否够细心，考虑问题是否全面，思维是否缜密。


		3.栈
				1.是什么
						1.栈是一种“操作受限”的线性表，只允许在一端插入和删除数据
						2.场景 - 限制  ： 从功能上来说，数组或链表确实可以替代栈，但你要知道，特定的数据结构是对特定场景的抽象，而且，数组或链表暴露了太多的操作接口，操作上的确灵活自由，但使用时就比较不可控，自然也就更容易出错。
				2.分情况算复杂度
						1.出栈操作来说，我们不会涉及内存的重新申请和数据的搬移，所以出栈的时间复杂度仍然是 O(1)。但是，对于入栈操作来说，情况就不一样了。当栈中有空闲空间时，入栈操作的时间复杂度为 O(1)。但当空间不够时，就需要重新申请内存和数据搬移，所以时间复杂度就变成了 O(n)。
						2.均摊时间复杂度一般都等于最好情况时间复杂度。因为在大部分情况下，入栈操作的时间复杂度 O 都是 O(1)，只有在个别时刻才会退化为 O(n)，所以把耗时多的入栈操作的时间均摊到其他入栈操作上，平均情况下的耗时就接近 O(1)。
						2.均摊复杂度意义是什么？
				3.应用
						1.栈在方法调用中的应用
						2.栈在表达式求值中的应用
									编译器就是通过两个栈来实现的。其中一个保存操作数的栈，另一个是保存运算符的栈。我们从左向右遍历表达式，当遇到数字，我们就直接压入操作数栈；当遇到运算符，就与运算符栈的栈顶元素进行比较。如果比运算符栈顶元素的优先级高，就将当前运算符压入栈；如果比运算符栈顶元素的优先级低或者相同，从运算符栈中取栈顶运算符，从操作数栈的栈顶取 2 个操作数，然后进行计算，再把计算完的结果压入操作数栈，继续比较。
									栈在表达式求值中的应用.png 
						3.栈在括号匹配中的应用
									我们假设表达式中只包含三种括号，圆括号 ()、方括号 [] 和花括号{}，并且它们可以任意嵌套。比如，{[{}]}或 [{()}([])] 等都为合法格式，而{[}()] 或 [({)] 为不合法的格式。那我现在给你一个包含三种括号的表达式字符串，如何检查它是否合法呢？这里也可以用栈来解决。我们用栈来保存未匹配的左括号，从左到右依次扫描字符串。当扫描到左括号时，则将其压入栈中；当扫描到右括号时，从栈顶取出一个左括号。如果能够匹配，比如“(”跟“)”匹配，“[”跟“]”匹配，“{”跟“}”匹配，则继续扫描剩下的字符串。如果扫描的过程中，遇到不能配对的右括号，或者栈中没有数据，则说明为非法格式。
									相对于计数法，这种保证了强 ‘ 近 ’关系即 符号位置关系 

						4.浏览器前进后退就是这个道理，使用两个栈设置，当从其中的页面跳转到其他页面后，这种后退关系消失

		4.队列
				1.是什么	
						1.队列跟栈一样，也是一种操作受限的线性表数据结构
						2.用数组实现的队列叫作顺序队列，用链表实现的队列叫作链式队列。

				2.应用
						1.队列的应用也非常广泛，特别是一些具有某些额外特性的队列，比如循环队列、阻塞队列、并发队列。它们在很多偏底层系统、框架、中间件的开发中，起着关键性的作用。比如高性能队列Disruptor、Linux 环形缓存，都用到了循环并发队列；Java concurrent 并发包利用ArrayBlockingQueue 来实现公平锁等。
						2.在应用中实现小型的mq操作，实现延时、批量处理；对于非实时的操作或者网络/调用延迟高的应用

				3.实现
						1.顺序队列和链式队列
							1.队列需要两个指针：一个是 head 指针，指向队头；一个是 tail 指针，指向队尾
							2.不是自己想的，每次pop都会将整体数组移动到arr[0]位置，随着不停地进行入队、出队操作，head 和 tail 都会持续往后移动。当tail 移动到最右边，即使数组中还有空闲空间，也无法继续往队列中添加数据了。这个问题该如何解决呢？
									数组的删除操作会导致数组中的数据不连续 --> 数据搬移 --> 次进行出队操作都相当于删除数组下标为 0 的数据，要搬移整个队列中的数据，这样出队操作的时间复杂度就会从原来的 O(1) 变为 O(n)
									如果没有空闲空间了，我们只需要在入队时，再集中触发一次数据的搬移操作
									
 									/ 数据搬移      for (int i = head; i < tail; ++i) {        items[i-head] = items[i];      }      // 搬移完之后重新更新 head 和 tail      tail -= head;      head = 0;    }    items[tail] = item;    ++tail;    return true;  }复制代码
								

						2.循环队列 - 环
								ArrayBlockingQueue -- 这个实现其实就阻塞的，循环队列是2的实现
											源码中：if (++putIndex == items.length)
									           			 putIndex = 0;  //到队尾时，将指针修改
									        问题：是否会覆盖0位置的数据 ---> offer方法enqueue前面进行了判断 if (count == items.length)

								2.在用数组实现的非循环队列中，队满的判断条件是 tail == n，队空的判断条件是 head ==tail。那针对循环队列，如何判断队空和队满呢？
										队列为空的判断条件仍然是 head == tail。就像我图中画的队满的情况，tail=3，head=4，n=8，所以总结一下规律就是：(3+1)%8=4。多画几张队满的图，你就会发现，当队满时，(tail+1)%n=head
										图中的 tail 指向的位置实际上是没有存储数据的。所以，循环队列会浪费一个数组的存储空间
								
								循环队列的长度设定需要对并发数据有一定的预测，否则会丢失太多请求
								循环队列增加flag来避免浪费最后一个存储空间，那是不是flag本身也需要一个存储空间
								cas实现


						3.阻塞队列和并发队列
								阻塞队列其实就是在队列基础上增加了阻塞操作
								ArrayBlockingQueue -- mq的底层
								并发安全队列 - lock
				4.线程池
						基于链表的实现方式，可以实现一个支持无限排队的无界队列（unbounded queue），但是可能会导致过多的请求排队等待，请求处理的响应时间过长。所以，针对响应时间比较敏感的系统，基于链表实现的无限排队的线程池是不合适的。而基于数组实现的有界队列（bounded queue），队列的大小有限，所以线程池中排队的请求超过队列大小时，接下来的请求就会被拒绝，这种方式对响应时间敏感的系统来说，就相对更加合理。不过，设置一个合理的队列大小，也是非常有讲究的。队列太大导致等待的请求太多，队列太小会导致无法充分利用系统资源、发挥最大性能。除了前面讲到队列应用在线程池请求排队的场景之外，队列可以应用在任何有限资源池中，用于排队请求，比如数据库连接池等。实际上，对于大部分资源有限的场景，当没有空闲资源时，基本上都可以通过“队列”这种数据结构来实现请求排队。
		
		5.递归
				1.场景
						1.递归是一种应用非常广泛的算法（或者编程技巧）比如 DFS 深度优先搜索、前中后序二叉树遍历
						2.问电影院位置，直到问到第一排，再把编号传回来。去的过程叫“递”，回来的过程叫“归”。所有的递归问题都可以用递推公式来表示。 (n)=f(n-1)+1 其中，f(1)=1复制代码1234int f(int n) {  if (n == 1) return 1;  return f(n-1) + 1;}复制代码
				2.代码
						int f(int n) {  
							if (n == 1) return 1;  
							return f(n-1) + 1;
							}
				3.三个条件
						1. 一个问题的解可以分解为几个子问题的解何为子问题？子问题就是数据规模更小的问题。比如，前面讲的电影院的例子，你要知道，“自己在哪一排”的问题，可以分解为“前一排的人在哪一排”这样一个子问题。
						2. 这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样比如电影院那个例子，你求解“自己在哪一排”的思路，和前面一排人求解“自己在哪一排”的思路，是一模一样的。
						3. 存在递归终止条件把问题分解为子问题，把子问题再分解为子子问题，一层一层分解下去，不能存在无限循环，这就需要有终止条件。还是电影院的例子，第一排的人不需要再继续询问任何人，就知道自己在哪一排，也就是f(1)=1，这就是递归的终止条件。1f(n)=f(n-1)+1 其中，f(1)=1复制代码1234int f(int n) {  if (n == 1) return 1;  return f(n-1) + 1;}

				4.练习
						假如这里有 n 个台阶，每次你可以跨 1 个台阶或者 2 个台阶，请问走这 n 个台阶有多少种走法？如果有 7 个台阶，你可以 2，2，2，1 这样子上去，也可以 1，2，1，1，2 这样子上去，总之走法有很多，那如何用编程求得总共有多少种走法呢？我们仔细想下，实际上，可以根据第一步的走法把所有走法分为两类，第一类是第一步走了1 个台阶，另一类是第一步走了 2 个台阶。所以 n 个台阶的走法就等于先走 1 阶后，n-1个台阶的走法 加上先走 2 阶后，n-2 个台阶的走法。用公式表示就是：						
						有了递推公式，递归代码基本上就完成了一半。我们再来看下终止条件。当有一个台阶时，我们不需要再继续递归，就只有一种走法。所以 f(1)=1。这个递归终止条件足够吗？我们可以用 n=2，n=3 这样比较小的数试验一下。n=2 时，f(2)=f(1)+f(0)。如果递归终止条件只有一个 f(1)=1，那 f(2) 就无法求解了。所以除了 f(1)=1 这一个递归终止条件外，还要有 f(0)=1，表示走 0 个台阶有一种走法，不过这样子看起来就不符合正常的逻辑思维了。所以，我们可以把 f(2)=2 作为一种终止条件，表示走 2 个台阶，有两种走法，一步走完或者分两步来走。所以，递归终止条件就是 f(1)=1，f(2)=2。这个时候，你可以再拿 n=3，n=4 来验证一下，这个终止条件是否足够并且正确。我们把递归终止条件和刚刚得到的递推公式放到一起就是这样的：
							f(n) = f(n-1)+f(n-2）
							f(1) = 1;f(2) = 2;
				5.坑
					避免溢出-递归深度
						1.int depth = 0; 1000?
					递归代码要警惕重复计算
						1.递归拆解中重复计算.png 
						2.为了避免重复计算，我们可以通过一个数据结构（比如散列表）来保存已经求解过的 f(k)。
					在时间效率上，递归代码里多了很多函数调用，当这些函数调用的数量较大时，就会积聚成一个可观的时间成本。在空间复杂度上，因为递归调用一次就会在内存栈中保存一次现场数据，所以在分析递归代码空间复杂度时，需要额外考虑这部分的开销，比如我们前面讲到的电影院递归代码，空间复杂度并不是 O(1)，而是 O(n)

				6.递归改循环
						利是递归代码的表达力很强，写起来非常简洁；而弊就是空间复杂度高、有堆栈溢出的风险、存在重复计算、过多的函数调用会耗时较多等问题。

				 ===> 本质就是数学中的  归纳 - 总结 - 推理

		6.排序
				1.分类
						比如猴子排序、睡眠排序、面条排序等。我只讲众多排序算法中的一小撮，也是最经典的、最常用的：冒泡排序、插入排序、选择排序、归并排序、快速排序、计数排序、基数排序、桶排序。
				2.排序时间复杂度.png 
				
				3.如何分析一个算法
					1.排序算法的执行效率
						1.最好情况、最坏情况、平均情况时间复杂度
						2.时间复杂度的系数、常数 、低阶
								但是实际的软件开发中，我们排序的可能是 10 个、100 个、1000 个这样规模很小的数据，所以，在对同一阶时间复杂度的排序算法性能对比的时候，我们就要把系数、常数、低阶也考虑进来。
						3.比较次数和交换（或移动）次数	

					2.排序算法的内存消耗	
						1.算法的内存消耗可以通过空间复杂度来衡量，排序算法也不例外。不过，针对排序算法的空间复杂度，我们还引入了一个新的概念，原地排序（Sorted in place）。原地排序算法，就是特指空间复杂度是 O(1) 的排序算法。我们今天讲的三种排序算法，都是原地排序算法。						

					3.排序算法的稳定性
						1.这个概念是说，如果待排序的序列中存在值相等的元素，经过排序之后，相等元素之间原有的先后顺序不变。
						2.多维度排序：们先按照下单时间给订单排序，注意是按照下单时间，不是金额。排序完成之后，我们用稳定排序算法，按照订单金额重新排序。两遍排序之后，我们得到的订单数据就是按照金额从小到大排序，金额相同的订单按照下单时间从早到晚排序的
									 按时间和金额排序.png 

				4.排序
						1.冒泡排序
								1.过程
									冒泡排序只会操作相邻的两个数据。
									每次冒泡操作都会对相邻的两个元素进行比较，看是否满足大小关系要求。
									如果不满足就让它俩互换。

								2.冒泡排序示意图.png 

								3.优化1
										当某次冒泡操作已经 ' 没有数据交换 ' 时，说明已经达到完全有序，不用再继续执行后续的冒泡操作
										冒泡排序优化1.png 


										冒泡排序实现.png 

								4.时间复杂度
										最好情况下，要排序的数据已经是有序的了，我们只需要进行一次 ‘ 冒泡操作 ’ ，就可以结束了，所以最好情况时间复杂度是 O(n)。
										最坏的情况是，要排序的数据刚好是倒序排列的，我们需要进行 n 次冒泡操作，所以最坏情况时间复杂度为 O(n)。
										平均时间复杂度就是加权平均期望时间复杂度，分析的时候要结合概率论的知识
												对于包含 n 个数据的数组，这 n 个数据就有 n! 种排列方式。不同的排列方式，冒泡排序执行的时间肯定是不同的。比如我们前面举的那两个例子，其中一个要进行 6 次冒泡，而另一个只需要 4 次。如果用概率论方法定量分析平均时间复杂度，涉及的数学推理和计算就会很复杂。我这里还有一种思路，通过“有序度”和“逆序度”这两个概念来进行分析
												有序度是数组中具有有序关系的元素对的个数   ==> 有序对.png 
												同理，对于一个倒序排列的数组，比如 6，5，4，3，2，1，有序度是 0；对于一个完全有序的数组，比如 1，2，3，4，5，6，有序度就是n*(n-1)/2，也就是 15。我们把这种完全有序的数组的有序度叫作满有序度

										冒泡排序有序度.png 

								5.比较和交换

						2.插入排序
								1.过程
										将数组中的数据分为两个区间，已排序区间和未排序区间。初始已排序区间只有一个元素，就是数组的第一个元素。
										插入算法的核心思想是取未排序区间中的元素，在已排序区间中找到合适的插入位置将其插入，并保证已排序区间数据一直有序。重复这个过程，直到未排序区间中元素为空，算法结束。

								2.插入排序示意图.png
										插入排序实现.png 

								3.时间复杂度
										如果要排序的数据已经是有序的，我们并不需要搬移任何数据。如果我们从尾到头在有序数据组里面查找插入位置，每次只需要比较一个数据就能确定插入的位置。所以这种情况下，最好是时间复杂度为 O(n)。注意，这里是从尾到头遍历已经有序的数据。如果数组是倒序的，每次插入都相当于在数组的第一个位置插入新的数据，所以需要移动大量的数据，所以最坏情况时间复杂度为 O(n)。还记得我们在数组中插入一个数据的平均时间复杂度是多少吗？没错，是 O(n)。所以，对于插入排序来说，每次插入操作都相当于在数组中插入一个数据，循环执行 n 次插入操作，所以平均时间复杂度为 O(n)。



						3.选择排序
								1.过程
										选择排序算法的实现思路有点类似插入排序，也分已排序区间和未排序区间。但是选择排序每次会从未排序区间中找到最小的元素，将其放到已排序区间的末尾。

								2.选择排序示意图.png 
								3.选择排序空间复杂度为 O(1)，是一种原地排序算法。选择排序的最好情况时间复杂度、最坏情况和平均情况时间复杂度都为 O(n)
								  选择排序是一种不稳定的排序算法。从我前面画的那张图中，你可以看出来，选择排序每次都要找剩余未排序元素中的最小值，并和前面的元素交换位置，这样破坏了稳定性。
								  比如 5，8，5，2，9 这样一组数据，使用选择排序算法来排序的话，第一次找到最小元素2，与第一个 5 交换位置，那第一个 5 和中间的 5 顺序就变了，所以就不稳定了。正是因此，相对于冒泡排序和插入排序，选择排序就稍微逊色了。

 						
 						4.插入排序要比冒泡排序更受欢迎?
 							
 							我们前面分析冒泡排序和插入排序的时候讲到，冒泡排序不管怎么优化，元素交换的次数是一个固定值，是原始数据的逆序度。插入排序是同样的，不管怎么优化，元素移动的次数也等于原始数据的逆序度。但是，从代码实现上来看，冒泡排序的数据交换要比插入排序的数据移动要复杂，冒泡排序需要 3 个赋值操作，而插入排序只需要 1 个。
 							为了实验，针对上面的冒泡排序和插入排序的 Java 代码，我写了一个性能对比测试程序，随机生成 10000 个数组，每个数组中包含 200 个数据，然后在我的机器上分别用冒泡和插入排序算法来排序，冒泡排序算法大约 700ms 才能执行完成，而插入排序只需要 100ms 左右就能搞定！
 							虽然冒泡排序和插入排序在时间复杂度上是一样的，都是 O(n)，但是如果我们希望把性能优化做到极致，那肯定首选插入排序。插入排序的算法思路也有很大的优化空间，我21234567891011121314冒泡排序中数据的交换操作：if (a[j] > a[j+1]) { // 交换   int tmp = a[j];   a[j] = a[j+1];   a[j+1] = tmp;   flag = true;}插入排序中数据的移动操作：if (a[j] > value) {  a[j+1] = a[j];  // 数据移动} else {  break;}复制代码2
们只是讲了最基础的一种。
							

						学习的目的也只是为了开拓思维

						如何用快排思想在O(n)内查找第K大元素
								1.冒泡排序、插入排序、选择排序这三种排序算法，它们的时间复杂度都是O(n^2)，比较高，适合小规模数据的排序。
								  归并排序和快速排序。这两种排序算法适合大规模的数据排序O(nlogn) == 分治思想


						5.归并排序
								1.归并排序示意图.png + 归并排序示意图2.png ==需要申请临时数组 == merge() 合并函数如果借助哨兵，代码就会简洁很多
								2.分治算法一般都是用递归来实现的。分治是一种解决问题的处理思想，递归是一种编程技巧，这两者并不冲突。
								3.非原地排序 o(n)； 稳定排序 ； 复杂度任何情况下都是 O(nlogn)

						6.快速排序
								1.如果要排序数组中下标从 p 到 r 之间的一组数据，我们选择 p 到 r之间的任意一个数据作为 pivot（分区点）
								2.快速排序示意图.png 
								3.分区函数
								4.快速排序和归并排序对比.png 

									归并排序的处理过程是由下到上的，先处理子问题，然后再合并。而快排正好相反，它的处理过程是由上到下的，先分区，然后再处理子问题。归并排序虽然是稳定的、时间复杂度为 O(nlogn) 的排序算法，但是它是非原地排序算法。我们前面讲过，归并之所以是非原地排序算法，主要原因是合并函数无法在原地执行。快速排序通过设计巧妙的原地分区函数，可以实现原地排序，解决了归并排序占用太多内存的问题



						============> 八大排序算法总结与java实现  : https://itimetraveler.github.io/2017/07/18/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E4%B8%8Ejava%E5%AE%9E%E7%8E%B0/

						如何快速定位前 k 个元素？


						7.线性排序：( 桶排序、计数排序、基数排序 ) 如何根据年龄给100万用户数据排序？
								1.三种时间复杂度是 O(n) 的排序算法：桶排序、计数排序、基数排序。因为这些排序算法的时间复杂度是线性的。之所以能做到线性的时间复杂度，主要原因是，这三个算法是非基于比较的排序算法，都不涉及元素之间的比较操作。
								2.桶排序（Bucket sort）核心思想是将要排序的数据分到几个有序的桶里，每个桶里的数据再单独进行排序。桶内排完序之后，再把每个桶里的数据按照顺序依次取出，组成的序列就是有序的了。
										1.注意点
												1.要排序的数据需要很容易就能划分成 m 个桶
												2.桶与桶之间有着天然的大小顺序。这样每个桶内的数据都排序完之后，桶与桶之间的数据不需要再进行排序
												3.数据在各个桶之间的分布是比较均匀的

										2.外部排序：桶排序比较适合用在外部排序中。所谓的外部排序就是数据存储在外部磁盘中，数据量比较大，内存有限，无法将数据全部加载到内存中。

										3.问题展示：比如说我们有 10GB 的订单数据，我们希望按订单金额（假设金额都是正整数）进行排序，但是我们的内存有限，只有几百 MB，没办法一次性把 10GB 的数据都加载到内存中。这个时候该怎么办呢？
												1.理想情况，将金额分到100个桶中，每个桶数据100m，依次读入内存进行排序；最后合并处理(无需具体，因为桶本身就有序)
												2.将不能读入内存的再次划分直到可以读入内存排序

								3.计数排序 == 没看懂
										1.对应分数从 0 分到 900 分。根据考生的成绩，我们将这 50 万考生划分到这 901 个桶里。桶内的数据都是分数相同的考生，所以并不需要再进行排序。我们只需要依次扫描每个桶，将桶内的考生依次输出到一个数组中，就实现了 50 万考生的排序

										2.计数排序只能用在数据范围不大的场景中，如果数据范围 k 比要排序的数据n 大很多，就不适合用计数排序了。而且，计数排序只能给非负整数排序，如果要排序的数据是其他类型的，要将其在不改变相对大小的情况下，转化为非负整数
										3.实现过程
												1.我们对 C[6] 数组顺序求和，C[6] 存储的数据就变成了下面这样子。C[k] 里存储小于等于分数 k 的考生个数
												2.我们从后到前依次扫描数组 A。比如，当扫描到 3 时，我们可以从数组 C 中取出下标为 3的值 7，也就是说，到目前为止，包括自己在内，分数小于等于 3 的考生有 7 个，也就是说 3 是数组 R 中的第 7 个元素（也就是数组 R 中下标为 6 的位置）。当 3 放入到数组 R中后，小于等于 3 的元素就只剩下了 6 个了，所以相应的 C[3] 要减 1，变成 6。以此类推，当我们扫描到第 2 个分数为 3 的考生的时候，就会把它放入数组 R 中的第 6 个元素的位置（也就是下标为 5 的位置）。当我们扫描完整个数组 A 后，数组 R 内的数据就是按照分数从小到大有序排列的了。

												计数排序.png 

								4.基数排序（Radix sort）
										1.基数排序对要排序的数据是有要求的，需要可以分割出独立的“位”来比较，而且位之间有递进的关系，如果 a 数据的高位比 b 数据大，那剩下的低位就不用比较了。除此之外，每一位的数据范围不能太大，要可以用线性排序算法来排序，否则，基数排序的时间复杂度就无法做到 O(n) 了。
										2.桶排序和计数排序的排序思想是非常相似的，都是针对范围不大的数据，将数据划分成不同的桶来实现排序。基数排序要求数据可以划分成高低位，位之间有递进关系。比较两个数，我们只需要比较高位，高位相同的再比较低位。而且每一位的数据范围不能太大，因为基数排序算法需要借助桶排序或者计数排序来完成每一个位的排序工作。


								==> 基数排序：根据键值的每位数字来分配桶；
									计数排序：每个桶只存储单一键值；
									桶排序：每个桶存储一定范围的数值；

						8.排序优化
								1.应用中直接使用的Collections.sort(Compare...)底层原理是什么？
										Timsort详解:https://www.jianshu.com/p/892ebd063ad9
										1.元素个数 < 32, 采用二分查找插入排序(Binary Sort)
										2.元素个数 >= 32, 采用归并排序，归并的核心是分区(Run)
										3.找连续升或降的序列作为分区，分区最终被调整为升序后压入栈

								2.MySQL学习——排序算法
										当order by不能使用索引进行排序时，将使用排序算法进行排序：

											1.若排序内容能全部放入内存，则仅在内存中使用快速排序；
											2.若排序内容不能全部放入内存，则分批次将排好序的内容放入文件，然后将多个文件进行归并排序
											3.若排序中包含limit语句，则使用堆排序优化排序过程

										jianshu.com/p/2aaafad8de32

								2.几种算法比较.png 
								3.	

				8.查找
						1.用最省内存的方式实现快速查找功能														
