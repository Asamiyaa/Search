1.图搜框架对泛型和函数式思考
	1.类定义结构骨架，对象 - 类 - 泛型逻辑(类公共逻辑) ； 对于无需属性，只需函数，又对于不同需求有着不同‘ 方法逻辑 ’【区分开xxUtils】这种逻辑，此时便引入函数式编程，将方法独立且复用

	2.参考 MockFramework.codeImpl中泛型
	      blog.

	3.实践
		  图搜框架整体对数据处理抽线为 条件 - 多路召回 - 打分 - 去重 - 排序 - 输出 ；
		  		1.数据量大操作list --> jdk8函数编程api - group/sort/compare/limit/reduce/max... lambda使用；
		  		2.许多都是 ‘ 方法 ’所以引入了函数式的接口比如biFunction..等；
		  		3.由于抽象的处理流程高于具体的场景比如：局部搜/万物搜/多模搜/渐进搜等，所以泛型引入类型泛型，作为属性，属性容器泛型传递，方法...
		  		4.如何将各个场景的具体实现标识到上层流程，如何触发流程呢？
		  			 其实每个场景都继承了这个抽象流程，通过构造方法+注解 将这些个性化的东西映射到父类，父类属性(泛型)其实也说明了抽象的父类中(模板方法)是可以有属性的而不仅是方法，只是不要复用。每个子类用自己通过构造注入
		  			 那么抽象的父类就可以通过这些属性进行模板方法操作


		  	详见：tskj.png 
		  	

