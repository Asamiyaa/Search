软件设计
	
		问题：
				1.如何把控业务架构整体、技术整体
				2.如何把控细节？问题排查，分支判断 ...


		1.算法对抗的是数据的规模，而软件设计对抗的是需求的规模
		2.需求分析
				1.模型 	抽象-准确性 - 模型  限定了什么样的需求应该以怎样的方式去完成
							交易原语：下单、成交、撤单
					  		交易动作：资产冻结、解冻、出金、入金

					  		交易原语保证每个业务的准确性，由交易动作保证整个操作的事务性

				2.粒度

				3.规范  - 限定了什么样的需求应该以怎样的方式去完成
					1.与业务处理相关的代码，应该体现在领域模型中；
					2.与网络连接相关的代码，应该写在网关里；
					3.与外部系统集成的代码，需要有防腐层；

		3.分离关注点 - 本质
				1.将业务处理和技术实现两个关注点分离 
							业务再先，技术在后
				2.不同的数据变动方向分离 
							动静分离 
							读写分离
							高低频分离

				3.CQRS（Command Query Responsibility Segregation）看看它分离了哪些关注点，以及在什么样的场景下使用这种架构是合理的：
		 				1.命令与查询分离，最早是在ddd实战里面看到。其分离啦增删改与查询这两个关注点。
		 				2.静态上，拆分了这两块的代码。使各自可以采用不同的技术栈，做针对性的调优。动态上，切分了流量，能够更灵活的做资源分配

		 		4.从小点训练
		 				1.如果有if...else，每种情况都可以单独放到一个函数里；
						2.如果有多个 if...else，要问问自己是不是缺少了一些模型，是不是可以用多态解决；

				5.内部类


		4.可测试性	- 对影响性和构建点真正的梳理，清晰化
				0.每个分支  selfcheck.sh 自己测试了每个分支，测试中发现了许多问题进行了提前修复
				1.TDD（Test-Driven Development，测试驱动开发）
				2.spring轻量级开发。而这背后，重要的思维基础，就是可测试性.隔离性、组件化
				3.BUG复现数据等价性、

		问题 ==> 如何在不使用spring集成测试的前提下，对业务代码进行测试呢？--耗时
				参考：http://atomicdevelop.com/2018/10/28/unittest/
						@ContextConfiguration /  @MockBean /  @TestPropertySource(properties = {"config.username=myUsername"})


		5.模型 - 接口 - 实现
				1.模型
						1.抽象
						2.框架
						3.固定流程 调用接口实现 
						4.稳定

				2.接口
						1.决定了软件通过怎样的方式，将模型提供的能力暴露出去。它是我们与这个软件交互的入口
						2.linux命令行接口  、 restful api
						3.稳定

				3.实现
						1.一个业务系统收到一个请求之后，是把信息写到数据库，还是转发给另外的系统。
						2.一个算法的实现，是选择调用与别人已有的程序库，还是需要自己实现一个特定的算法。
						3.一个系统中的功能，哪些应该做成分布式的，哪些应该由一个中央节点统一处理。
						4.一段业务处理，是应该做成单线程，还是多线程的。当资源有竞争，是每个节点自己处理，还是交由一个中间件统一处理。
						5.不同系统之间的连接，该采用哪种协议，是自己实现，还是找一个中间件。
						....
						6.可替换的
						7.多样的

						... 细节

						带着问题去看具体的实现细节，比如kafka:
								生产端如果出现网络抖动，消息没有成功发送，它要怎么重试呢？
								消费端处理完的消息，怎样才能保证集群不会重复发送呢？
								为什么要设计一个集群呢？要防止出现单点的故障，而一旦有了集群，就会牵扯到下一个问题，集群内的节点如何保证消息的同步呢？
								消息在集群里是怎么存储的？
								生产端也好，消费端也罢，如果一个节点彻底掉线，集群该怎么处理呢？
								为什么使用顺序读写？其他mq就不适用呢？



								Kafka 这个实现到底是哪里不容易想到呢？答案是   [  软硬结合  ]。

			6.混合编程
					1.程序设计语言主要是为了学习程序设计语言提供的编程模型，比如：不同的程序组织方式，不同的控制结构等等。因为不同的编程模型会带给你不同的 【 思考方式 】
					2.C 语言提供了对汇编指令直接的封装。  C 的强项是对于计算机模型的适度抽象，弱项却是在程序的组织上。
					  C++ 先是提供了面向对象，后来又提供了泛型编程。
					  Java 把内存管理从开发者面前去掉了，后来引入的 Annotation 可以进行声明式编程。
					  Ruby 提供了动态类型，以及由 Ruby on Rails 引导出的 DSL 风格。
					  Scala 和 Clojure 提供了函数式编程。
					  Rust 提供了新的内存管理方式，而 Libra 提供的 Move 语言则把它进一步抽象成了资源的概念。
					  sql
					  shell
					  模板
					  javascript
					  node.js
					  go	云计算领域还有一些基础设施要写，用 C 的话，不好维护；用 Java 的话，浪费资源；Go 恰如其分地解决了大部分问题

					3.不同编程风格中优秀的元素放在一起。比如，我们采用面向对象来组织程序，而在每个类具体的接口设计上，采用函数式编程的风格，在具体的实现中使用结构化编程提供的控制结构。



			7.站在巨人的肩膀上进行一步步封装，但必须根据业务理解、扩展预见进行适度而不是过渡设计

			8.对于运行时的理解，我们甚至可以做出语言本身不支持的设计。所以，做设计真正的地基，并不是程序设计语言，而是运行时。
					1.java - class <== ASM / MOCK框架 / 切面 - 代理
					2.领域特定语言（Domain Specific Language，简称 DSL
							1.语言 ： 传递信息； 比如 xml 、 property、正则 都是可以通过 【 定义语言、解析规则 】 来定义逻辑 。 其实向java/c..也都是在元数据、源语言基础上定义自己的逻辑、对于关键字、模型 的封装
							2.解析器parser
					3.声明式编程。现在一些程序设计语言的语法就是为了方便进行声明式编程，典型的例子就是 Java 的 【  Annotation  】 。正是它的出现，Spring 原来基于 XML 的外部 DSL 就逐步转向了今天常用的内部 DSL 了，也就是很多人熟悉的 Java Config。

					4.二者的抽象级别是不同的，“怎么做”是一种实现 = 通过java new 对象 ，
					而“做什么”则体现着意图 通过定义computer().processor().cores(2).speed(2500).i386().disk().size(150)  === builder模式？
					将 【 意图与实现 】 分离开来，是内部 DSL 与普通的程序代码一个重要的区别，同样，这也是一个好设计的考虑因素。

					5.空接口 、 注解 =  意图  可能有时他们都没有真正操作，只是表达了某种意图


			9.函数式编程 	- 面向对象编程的方式对系统的结构进行搭建，然后，用函数式编程的理念对函数接口进行设计
					1.函数式就是把一些事情交给编程语言去做，程序员不用去思考怎么实现，就像在list里的查找，我不用去考虑遍历的方法，只要给个条件，返回我要的结果就行了.声明式编程，说明做什么，不必关心怎么做

					todo：《134-软件设计之美》 ：17、18、19 


			10.设计模式
					1.六大原则
					  单一职责原则（Single responsibility principle，SRP）
							1.单一职责原则和一个类只干一件事之间，最大的差别就是，将变化纳入了考量。
							2.当新需求时，如何评估变化？是给老接口、对象添加属性 vs 强不变性 ==> 一定要视情况而定，比如增加的属性是正常的业务扩展，比如isvid、corpId...这些就添加到属性中

								1.变化原因：抽象粒度不够，导致多需求覆盖 比如 将user类修改为 用户管理的需求只要调整 User 类就好，而项目管理的需求只要调整 Member
								2.变化来源：将变化配置化、参数化、适配化、中间缓冲化、不同模块形成隔离 = 运营系统和交易系统


					  开放封闭原则（Open–closed principle，OCP）
						  		1.判断单一职责划分是否合理，比如指标。对扩展开放(通过类实现固定接口)，而对原来各自指标不进行修改，减少影响性,使其稳定 。 / searcher框架中的不同接口与总搜索流程
						  		2.从if - 方法 - 类 抽象    1.含义是否足够大 2.业务上是否足够独立  
						  		3.扩展需要构建扩展点，构建对应的模型。抽象-共性-推理-演绎
						  		4.插件 - 框架 (被调用)



					  Liskov 替换原则（Liskov substitution principle，LSP）
					  			1.完全遵循子类完全替换父类。真正的父子 A is a B



					  接口隔离原则（Interface segregation principle，ISP）- 影响面最小
					  			1.胖接口
					  					1.包含太多内容，而实现类并不会使用到所有的方法，所以通过隔离拆分为小的接口。
					  							1.步骤一：	接口classTransactionRequest{// 获取存款金额doublegetDepositAmount() ...// 获取取款金额doublegetWithdrawAmount(){    ...  }..
					  										每种操作类型都对应着一个业务处理的模块		
					  													interfaceTransactionHandler{voidhandle(TransactionRequest request)；}
					  													class DepositHandler implements TransactionHandler {voidhandle(final TransactionRequest request){
					  													....
					  										
					  										分发：TransactionHandler handler = handlers.get(request.getType());
					  										if (handler != null) {  handler.handle(request);}getDepositAmount 方法只在 DepositHandler 里使用；getWithdrawAmount 方法只在 WithdrawHandler 里使用；getTransferAmount 只在 TransferHandler 使用。

					  								===> 使用了handler处理，而不是xxximpl 
					  								     实现类中的入参TransactionRequest在不同的实现中只是用到了其中某个方法  
					  								     并且胖接口的修改都会触发使用者的重新编译

					  							2.步骤二：瘦下来 -- 通过泛型和父类完成更高抽象，取代了type判断和if... ***** 
					  								interface TransactionRequest{}
					  								interface DepositRequest  extends  TransactionRequest{doublegetDepositAmount();}

					  								interface TransactionHandler<T extends TransactionRequest> {voidhandle(T request)；}  通过泛型和父类完成更高抽象，取代了type判断和if...

					  								class DepositHandler implements TransactionHandler<DepositRequest> {voidhandle(final DepositRequest request){double amount = request.getDepositAmount();


					  							3.class ActualTransactionRequest implements DepositRequest, WithdrawRequest, Tra.... 实际的操作需要多个接口组合完成}

					  依赖倒置原则（Dependency inversion principle，DIP）
					  			1.高层模块不应依赖于低层模块，二者应依赖于抽象。 <=== 对于易变的实现，调用之间加 ’ 层 ‘，而不是直接调用。  抽象不应依赖于细节，细节应依赖于抽象。
					  			2.框架原理：框架设计了调用的流程(模板)，留着hook,扩展点，子类...等由其实现、override...
					  				****** DIP，还有一个形象的说法，称为好莱坞规则：“Don’t call us, we’ll callyou”。放在设计里面，这个翻译应该是“别调用我，我会调你的”。显然，这是一个框架才会有的说法，有了一个稳定的抽象，各种具体的实现都应该是由框架去调用。*********

					  			1.classHandler{private KafkaProducer producer;voidexecute(){    ...    Message message = ...;    producer.send(new KafkaRecord<>("topic", message);    ...  }}
					  			  handler直接依赖kafka存在父类依赖子类。添加了一层
					  			  interfaceMessageSender{voidsend(Message message);} 将发送逻辑进行抽象，比如参数组装、校验、调用、结果处理....  <== bbsp中的报文发送

					  			2.利用抽象编程、利用多态编程


			11.设计模式
					1.设计原则就像公理，它们是我们讨论各种问题的基础，而设计模式则是定理，它们是在特定场景下，对于经常发生的问题给出的一个可复用的解决方案 
					2.问题：
						1.很多人强行应用设计模式会让代码不必要地复杂起来，原因就在于他在解决的问题，和设计模式本身要解决的问题并不一定匹配 
						2.过度设计
					3.设计模式在现代语言中的使用及替代
						1.Singleton 并不是一个好的设计模式，它会影响系统的可测试性。从概念上说，系统里只有一个实例和限制系统里只能构建出一个实例 。在 DI 容器普遍使用的今天，DI 容器缺省情况下生成的对象就是只有一个实例
						2.jdk PropertyChangeSupport 替代 observe , Guava 的EventBus，你甚至都不用实现一个接口，只要用一个 Annotation 标记一下就可以监听了; spring的监听
						3.Annotation 可以说是消灭设计模式的一个利器 如@Builer  . Decorator 模式也可以通过 Annotation 实现，比如，一种使用 Decorator 模式的典型场景，是实现事务 @Transactional
						4.Java 8 引入 Lambda，Command 模式的写法也会得到简化

							Macro macro = new Macro();macro.record(new OpenFile(fileReceiver));
									|
							Macro macro = new Macro();macro.record(() -> fileReceiver.openFile());  问题：lambda到底是可以替换什么不是内部类么new interface(){....} 那么现在解决的是什么/
									|
							Macro macro = new Macro();macro.record(fileReceiver::openFile);

					
					todo： 《王争-设计模式之美》 





			12.简单(无知) - 乱套用(器) - 简单优雅解决问题(道)  大道至简
						1.kiss    Keep it simple, stupid
						2.DRY     Don’t repeat yourself



			13.DDD - 本质：如何合理划分以便不会因为需求造成膨胀、不稳定
				   1.概念：
				   			1.故事 - 模型
				   			2.画像
				   			3.域
				   			..


				   	todo:《134-软件设计之美》  27、28、29


			14.定义自己的框架 	https://github.com/dreamhead/moco

					1.它可以支持配置，这样的话，我就不用每次都调整代码了；
					2.它可以独立部署，因为部署到应用服务器上的方式实在不够轻量级；
					3.它可以是一个通用的解决方案，因为我已经在多个不同的场景下遇到类似的问题。
					4.有一个有表达性的DSL
					5.组合各个元素的 and。学过前面函数式编程的内容，想必你也知道了该如何实现它
					6.有些被模拟的服务不稳定，Moco 支持了一个 proxy 功能，将请求转发给被模拟服务。如果这个服务失效了，就使用本地缓存的信息；
					7.有些应答里的字段是根据请求的内容来的，Moco 支持了 template 功能，让使用者自己决定怎样使用哪个信息；
					8.有时还要对请求的内容，进行各种匹配。比如，URI 在同一个根目录下，就进行一样的处理，Moco 支持了 match 功能，让使用者自己可以写正则表达式，对请求进行匹配；
					9.有人为了方便管理，希望把所有的应答内容放到一个目录下，Moco 支持了 mount 功能，把一个目录挂载在一个 URI ；现在的 REST 开发是主流，Moco 支持了 REST 能力，能够定义资源，更方便地将同一资源的内容定义在一起；
					10.变化配置化 比如计算公式，参数配置由运营系统完成，实际计算则由计费系统为完成
					...


未理解：
			1.比如说订单系统 先下单写到数据库 然后发送消息给消息队列 这两部 没法放到一个事务中去。 如果用本地消息表， order 写数据库 然后 在写本地消息表 这样这两步就放到一个事务中去了 保证肯定成功， 然后在有线程 读取本地消息表 发送队列 如果成功更改本地消息表状态 。 从设计角度讲这就没分离关注点， 这个应该怎么分呀？

					我们来分析一下这个需求，下单入库和发消息给下游，这确实是两个动作，但这两个动作的顺序一定是这样吗？它们一定要在一个线程里完成吗？我们可不可以先发消息呢？比如，我们把消息发给下游之后，有一个下游接收到消息之后，再把消息入库。如果这样做的话，发消息，由消息队列保证消息不丢，下游入库，又可以保证订单持久化。你看，在这个设计中，其实，并不需要事务，所以，我们也不必为事务纠结了。

			问题：由于系统的处理能力不足，而添加了补偿机制。这里是不合理的。问题的根本是：如何保证处理，优雅的解决问题！使用消息队列
			2. 重试+幂等 vs 消息队列 vs 补偿 
					如果怕丢消息，可以在生产者端重试，可以在消费者端做幂等。补偿是一个能把场景弄复杂的做法，不鼓励。
