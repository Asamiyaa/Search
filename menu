menu list
    
    ++++++++++++++++（2021春节）  啃 = 深度 = 系统 = 工业级解决方案 +++
    ++++		0.检索技术 + 软件设计
    ++++		1.mysql db + 图解性能优化 + 理财 ===> 产出将是验证sql\mysql\druid\db配置的东西
                2.图解性能调优的全链路验证 + 问题定位即：arthas .jvm.	 当前项目：思考大数量是否可以保存在内存，如何评估当前jvm内存？
                3.kafka+zookeeper 大数据处理技术(从mapreduce/spark/flink/beem中获取大数据处理思路--这些都是从磁盘处理文件思路转化为目前项目是db处理了大数据量和一致性) <==实战
                  从0中检索技术对比目前的召回(select db)从中取出有用的思路 ===> 优化当前项目		
                4.并发(每个代码进行验证) redis  netty(源码)  + 性能测试   
                5.《极客时间 数据结构和算法》
    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    
  
    =============================目录==================================

    architector  

        1.注意每个文章中的todo


        1.软件设计     softDesign           《参考自：134-软件设计之美》 
        2.检索技术     searchTech           《参考自：123-检索技术核心》
        3.数据库技术   mysqlTech            《参考自：mysql》 
	4.kafka技术   kafkaTech(zookeeper)  《参考自：46-kafka核心技术和实践》 《126-kafka核心源码解析》
	5.大数据处理技术   bigDataTech       《36-大规模数据处理》
	
	
	

    doctor
        1.cpu100

    =============================目录==================================
    
    
    ============== 闭环 从技术 - 认知(微信名) - 一致性 ==================



        architector

                1.分析
                        1.需求分析
                        2.流程图
                2.编码
                        1.一致性
                            1.原流程必须非常清楚并debug验证后，画出旧流程图 --- 正常分支流程
                            2.影响性分析
                        2.健壮性
                            1.异常分支
                        3.性能
                            1.doctor-2
                3.测试
                        1.必须每个分支都要验证，从流程图上一步一步的验证

        devops
                1.自动化
                        1.多语言混合特性
                        2.快速部署
                2.容器
                        1.k8s

        doctor	
                1.问题定位
                        1.只有知道问题出在哪里才能够知道如何优化
                        2.需要综合多个指标协同来判断；没有固定的值来衡定是否有问题
                        3.多维度、多角度验证是否该指标问题 <==== 指标内部联系
                        4.区分是否是级联造成的问题，寻找最‘根本’问题，才能找到解决方案
                        5.结合业务时间点、访问量；具体分析
                2.优化点
                        1.
                        2.java
                                1.jvm
                                2.业务代码
                                3.业务流程
                                4.缓存
                                5.sql
                                6.算法
                        3.
                3.性能测试
                        1.指标
                        2.

        ===模型运用===

        ===投资

            1.左侧交易 / 右侧交易
            2.整理不同板块、趋势、
            3.筛选出自己认为代表性的基金



        ==身体
            1.脸皮肤
            2.腿鸡皮
            3.口角炎
            4.减肥 - 运动



===================闭环 从技术 - 认知(微信名)============================

==========================业务开发和中间件对比===========================

应用都要考虑
				一致性
						1.业务逻辑和代码逻辑一致
								1.普通逻辑
								2.事务
						2.主备
						3.mysql/kafka本身就要处理多线程下的并发访问安全性所以说 ‘ 锁 ’。而对于我们平时写的代码
						  tomcat/netty已经做了线程的隔离，如果我们不在业务层调用并发，那么就无需考虑数据并发安全问题。
						  而这个需要mysql..来控制

				异常
						1.异常场景
						2.断电 <-- 内存/磁盘  而自己代码只需要考虑内存业务无需关联持久性问题
				性能
						1.业务代码中使用缓存、数据结构、..
						2.mysql这种就要考虑大数据量下不同场景下的处理、而这种加速会影响到一致性和异常的处理，所以
								要给出统一方案，并且有了许多参数,不管是调优的还是分支 。 kafka也是。
								内存和磁盘持久化一致性是最为关键的
				扩展
						1.spring hook 
						2.插件机制


==========================业务开发和中间件对比===========================


