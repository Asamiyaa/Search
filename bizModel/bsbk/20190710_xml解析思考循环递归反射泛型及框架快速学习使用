
第一版：

/***
  1.明确解析的内容组成，特别是#text问题处理
  2.api到底获得是element的内容是什么 <name>abc<name>吗？ dom api是w3c 面向流程。清晰。
  3.反射   获取obj用于method.invoke / 获取method[]进行匹配调用
  4.泛型   代替了Class<?> 其实也可以时Class<T> 这样入参就是xx.class并且可以保证返回T / 强转(T)obj
  5.debug是用来规范思考漏洞的，不能用来它编写 。这种逆向思维适合解决问题，正向逻辑思维
**/
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class guocheng {
    public static <T> List<T> unMarshallDom(String XMLPath , T t) throws ParserConfigurationException, IOException, SAXException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, ClassNotFoundException, InstantiationException {
                                                            //同样也可以是Class<?> 但这里有返回T,所以泛型合适。
        Document document = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(XMLPath);//javax.xml.parsers包

        NodeList first = document.getChildNodes(); //Node 作为 不限语言的超级接口，子有 Document / Element ..

        for (int i = 0 ; i < first.getLength(); i++){  //doument下几个一级对象。可以有多个<users></users>--报错。这个方法是为了获得除正文意外的其他信息吗？
            //拿着它，解析得到它 ...
            Node seconedD = first.item(i);         //相当于document
            NodeList seconed = seconedD.getChildNodes();
            for (int j = 0 ; j < seconed.getLength() ; j++){
                if("#text".equals(seconed.item(j).getNodeName())){continue;} //sysout输出时没问题，但添加了第三层外操作，所以考虑其他没用元素影响。
                Node thirdD = seconed.item(j);      //每一行也需要解析 直至plaint   每个for就是缩小范围，不要去考虑总体容易乱；注意边界控制就好。
                NodeList third = thirdD.getChildNodes();
               
                //User user = new User(); //T 不可new
               
               //反射获取对象，method[]并保存
                //Class cls = Class.forName("com.utils.convertUtils.User");
                Class cls = t.getClass();
                Object obj = cls.newInstance();

                Method[] declaredMethods = cls.getDeclaredMethods();
                // Map<String , Class[]> methodMap = new HashMap<String , Class[]>(); //放到前面
                Map<String , Class[]> methodMap = new HashMap();
                for (Method method:
                        declaredMethods) {
                    // String[] split = method.getName().split("."); //lastIndex()+split
                    //String methodName = split[split.length-1];
                    if(!method.getName().startsWith("set")){continue;}
                    methodMap.put(method.getName(),method.getParameterTypes());
                }

                for(int x = 0 ; x < third.getLength() ; x++){
                    if("#text".equals(third.item(x).getNodeName())){continue;}
                    //System.out.println(third.item(x).getNodeName() +" = "+ third.item(x).getTextContent());
                    // if(x == 0 ){user.set}
                    String t1 = third.item(x).getNodeName().substring(0, 1).toUpperCase();
                    String t2 = third.item(x).getNodeName().substring(1);
                    String setM = "set"+t1+t2; //完整类名 T对象的路径
                    //String setM =  user.getClass().getName()+".set"+t1+t2;
                    //反射方法调用
                    //if(setM.equals("setName")){continue;} 测试   -- 当测试时添加 中断
                    //Method setM1 = cls.getDeclaredMethod( setM ,String.class);//将所有‘指定’的东西，泛化-从Class中获取

                    Method setM1 = cls.getDeclaredMethod( setM ,methodMap.get(setM));
                    //TODO 不是固定的 - 获取all method上所有的参数列表 map + 基本类型
                    setM1.invoke(obj , third.item(x).getTextContent());
                    // users.add((T)obj);每一组才是一个完整obj，所以放到下面
                }
                users.add((T)obj); //***泛型强转  反射强转可以获取类+()或者cast()****
            }
        }

        // return (T)new Object();
        return users ;
    }
}

  

第二版：

/**
  1.基本实现 测试
  2.递归通用性  vs for 嵌套这里的for作为规律。处理完成后轮询到下一个继续，倒着完成所有的。一层层返  .递归粒度必须完整的if else..不包含其他操作
    https://www.zhihu.com/question/20507130
  3.引入反射 泛型 -- 添加功能 ....
  4.对象的保存，三次循环后才能完成一个完整对象 处理：进去先添加获取最后一个，该对象操作三次 ，list.add(无需，因为是从中取得)，而不是循环到去创建
  5.当不易判断if条件处理时，全部按照一种，最后截取或者remove
**/

    public static <T> List unMarshallDom4j(String filePath, T t) throws InvocationTargetException, NoSuchMethodException, InstantiationException, IllegalAccessException, ParserConfigurationException, SAXException, IOException {
       
        try {
            File inputXml = new File(filePath);
            SAXReader saxReader = new SAXReader();

            org.dom4j.Document document = saxReader.read(inputXml);
            org.dom4j.Element root = document.getRootElement();


            //for (Iterator i = root.elementIterator(); i.hasNext();) { //这里  递归 vs 代码执行不是到了else就完了。递归出去
            // parseXmlDom4j((org.dom4j.Element)i.next(), t );
               parseXmlDom4j(root, t).remove(users.size()-1); //当if 不容易分开是，先默认，最后再处理，就像string
                return users ;

            //}
        } catch (DocumentException e) {
            System.out.println(e.getMessage());
        }

        return null; //成员变量 ，所以最后return 就是所有的值
    }

      static int ii = 0 ;
    private static <T> List parseXmlDom4j(org.dom4j.Element root, T t) throws IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, IOException, ParserConfigurationException, SAXException {

        //int ii = 0;
        //for (Iterator i = root.elementIterator(); i.hasNext();) {
       // System.out.println(users);
        if (!root.hasMixedContent()) {
            // System.out.println(root.getName() + ":" + root.getText());
            Class cls = t.getClass();
            if (users.size() == 0) {
                users.add(cls.newInstance());//添加初始值
            }
            //Object obj = cls.newInstance();
            Object obj = users.get(users.size() - 1);

            Method[] declaredMethods = cls.getDeclaredMethods();
            Map<String, Class[]> methodMap = new HashMap();
            for (Method method : declaredMethods) {
                if (!method.getName().startsWith("set")) {
                    continue;
                }
                methodMap.put(method.getName(), method.getParameterTypes());
            }

            String t1 = root.getName().substring(0, 1).toUpperCase();
            String t2 = root.getName().substring(1);
            String setM = "set" + t1 + t2;
            Method setM1 = cls.getDeclaredMethod(setM, methodMap.get(setM));
            setM1.invoke(obj, root.getText());

            ii++;
            if (ii == 3) { //保证保存
                //users.add(obj);已经赋值了无需再次添加
                ii = 0;
                //if(root.elementIterator().hasNext()) {  //最后不添加元素 错误  递归
                //if(!root.getParent().isRootElement()) {  --删掉空的obj
                    users.add(cls.newInstance());
                //}
            }
            // }else {
        } else {
            for (Iterator i = root.elementIterator(); i.hasNext(); ) {// 将整个递归放到循环中才是符合树形 临界位置/二次循环
                org.dom4j.Element child = (org.dom4j.Element) i.next();//新的迭代器 而不是原来的
                parseXmlDom4j(child, t); //for+递归  这里递归的整体(另一个if看作是1).所以递归顺着下去，顺着返回最后得到值，完成了该
                                         //节点的操作(最后找到了出口)  这个规律就是这里的for 等价于sum(n - 1) + n; 返回给调用者
                /**
                 * 递归两个条件
                 *      递归出口(终止递归的条件)
                        递归表达式(规律)
                 * public static int sum(int n) {
                     if (n == 1) {
                     return 1;
                     } else {
                     return sum(n - 1) + n;  //return 只是为了出参 和 递归没有关系。这里操作的是成员变量
                     }
                 */
            }
             //return users ;
        }
        return users ;
    }
    
 第三部分：
    
     明确此时扩展的是   框架中的那部分，该部分的设计模式，我们写代码充当那么流程，避免不起作用或者重复起作用。--sax流程图对照实现
