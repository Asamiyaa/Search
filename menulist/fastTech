宗旨：更健壮(异常、召回率)、更快速、更扩展(云-ddd-敏捷-迭代)



参考：redis-Api介绍  ： https://www.jianshu.com/p/5a3a50a2c954 ; map比较特殊，mput key filed value 对应前面一部分一样，后面不一样共同组成key

1.搜索.xmind 

2.常见性能优化策略
   参考与细节:
		1.具体的思考过程 取舍过程   参考:美团tech: https://tech.meituan.com/2016/12/02/performance-tunning.html
		2.结合 搜索.xmind 文档

		1.背景
				1.通用的常见思路以及方案选型的考虑点，帮助大家培养在方案选型时的意识、思维以及做各种权衡的能力
		2.维度
				0.流程优化
						业务处理逻辑优化：  
						实现逻辑优化    ：比如:for循环次数过多、作了很多无谓的条件判断、相同逻辑重复多次

				1.代码
						1.缓存  1.何时 2.哪些数据 3.类型  4.数据结构 - 压缩 5.一致性 - 持久化 6.过期淘汰策略 7.击穿/雪崩 
								
								何时
									1.经常使用的热数据 					-- 码值
									2.对当前流程或者新流程有复用作用		-- 暂存耗时的结果 --临近原理，比如流程中不同操作，‘ 可能复用 ’,类似于 内存/磁盘的近邻原则

								哪些数据    <=== todo:多算子中对key的处理加工 **********8

									数据特点
										1.稳定

									哪些做key / 哪些做value == 缓存不一定是key,value比如内存、磁盘页这些都是预加载，使其使用的时候更快速
										1.业务逻辑 string/对象
										2.mybatis /db 中将sql语句作为key 返回结果作为value


								缓存选型
									本地缓存
											场景：如果数据量小，并且不会频繁地增长又清空（这会导致频繁地垃圾回收），那么可以选择本地缓存。具体的话，如果需要一些策略的支持（比如缓存满的逐出策略）

											1.map - concurrentHashMap - guava cache 
											
									分布式缓存 - 缓存服务
											场景: 多台机器共享数据 ，多种value类型优化 ， 分布式锁 ， 持久化 

											1.redis -- 参考：MockFramework..codeImpl.redis = 基本使用及redis特性
															 search .. redisTech		   = 核心和实战
							    
							    数据结构 -- 说的是key的结构 -- 速度+内存占用


							    	HSET website google "www.g.cn"  == HGET website google
							    	LPUSH languages python LPUSH languages java  ==  LRANGE mylist 0 -1

							    	选性：选择合适Redis数据结构，减少80%的内存占用 
							    			https://zhuanlan.zhihu.com/p/98033960
							    			http://redisdoc.com/hash/hset.html

							    	注意：这里不应该存 ‘ 引用 ’，因为作为缓存，这里需要真正的key去对应

							    	组装设计key,可能需要多个要素共同组成key : incr userid:pageview 而不是使用threadlocal

							    压缩
							    	MD5:https://www.cnblogs.com/Marydon20170307/p/9116924.html

							    一致性
							    	是否需要持久性
							    		1.只读		无需   <=== 多线程中对 ‘ 包装器 ’
							    		2.读写      需要

							    过期淘汰策略
							    	随机数

							    击穿/雪崩 
							    	mutex :避免同时大量请求去数据库  详见:https://tech.meituan.com/2016/12/02/performance-tunning.html
							    	判null + 锁redis.setnx(key_mutex, 1, 3 * 60) 来完成

							    	布隆过滤器						
													
						
						
						2.异步
								1.多线程 + 回调  2.事件 + 监听(模式)  3.mq  	 <== MockFramework..Hmain.java
								
								何时
									1.多个事件在逻辑上没有关系    <=== 指标查看 selfcheck.java
									2.流程处理中无需 ‘ 立刻 ’对结果进行处理，并且这个结果获取过程是 ‘ 耗时 ’的

								哪种方式
									上面的1-2-3

								具体及注意点
										1.多线程 + 回调
												1.背景 ： web天然多线程 + spring单例 + 成员被不同请求存在写的入口(如果只是启动这里写一次这也不用担心了 - 不要瞎写set )

												2.参考及注意
												  框架作为基础层如何控制安全的？
												  如果把代码逻辑是流程抽象的模板，那数据db就是异处，且多请求访问的，那db是如何控制安全的？ ===*mm模型
												  虽然硬件级别会有时间片中断流程执行，但 ‘上下文切换 ’保证了只要代码逻辑没有问题，执行就按照执行
												  volatile boolean flag = true; 原子性：https://www.thinbug.com/q/45316067 + https://www.zhihu.com/question/50321417
												  有序性：JMM模型  https://zhuanlan.zhihu.com/p/101866125 思考为什么不会在‘多，乱’情况下输出不符合 -- 优化是有前提控制的
												  内存屏障：https://zhuanlan.zhihu.com/p/43526907
												  死锁和解决：https://blog.csdn.net/ZWE7616175/article/details/79881236
												
												3.ThreadMain.java 
														2.3  	
																无锁  :  final / 局部 / threadlocal
																juc	 :  atomic ... +  集合            <=== searcher.threadTech 10/13

														2.2		
																模式  - 协作							  <=== searcher.threadTech	14
														2.1 + 2.4
																线程池 + 返回结果

																		List<Future> xxxExecutorThreadPool.invokeAll(List<Callable>) / executeservice.submitAll <=== searcher.threadTech  16     lamdar表达式  submit(()->xxxx,()->xxx,)

																		future的处理  get(xx,xx,xx时间) 是否舍弃 vs 重试 vs cancle(是否得到结果就把其他的取消掉) , 其间主线程应该处理哪些最大化，最后真正用的地方在get
																		CompletableFuture ： 解决了 将多个异步计算的结果合并为一个  等待Future集合中的所有任务都完成  Future完成事件 (即，任务完成以后触发执行动作) ，操作更简单  
																		CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> {
        																	return 1; /   默认使用fork-join线程池处理   /  可以处理异常 / 可以是否关注所有异步任务 or 其中一个 or 最快 or combine ..
    })																	https://liurio.github.io/2019/12/17/Future%E5%92%8CCompletableFuture%E7%9A%84%E5%8C%BA%E5%88%AB/

																		fork-join ==> stream ( 结合了对大数据量的处理 list , 再这个方向简化了并发)

														spring支持 @EnableAsync模块注解开启异步支持,使用@Async


										2.事件 + 监听(模式)
												1.背景
													1.不会像 ‘ 多线程 ’ 那样在一个流程中异步。而是在 ‘ 场景级别 ’的异步 。 我不知道这个事情什么时候发生，但我知道这个事情发生后应该做什么

												2.场景
													1.事件对于当前系统有扩展可能性 
													2.开闭原则
													现假设一个用户注册的案例场景.用户注册后,系统需要给用户发送邮件告知用户注册是否成功,需要给用户初始化积分,后续可能会添加其他的操作,如再发一条手机短信等,希望程序具有拓展性符合开闭原则.

												3.如何使用
													1.通过spring + 泛型 ： https://segmentfault.com/a/1190000020967936



										3.mq 
												1.背景
													1.将相关耦合性进一步拆分，松到 ‘ 生产者 - 发送后不管 - 消费者 ’。 上面的监听器模式其实 ‘ 监听者绑定在被监听者上 ’

												2.roketmq - 事务 半事务机制 / kafkaTech 

												3.底层就是一个queue + 批量发送 + 惰性处理



						3.数据结构和算法
								

								1.java容器选择 -- 数据结构算法 ： https://juejin.cn/post/6844903633914445837#heading-22
								2.参考5.搜索
								
						4.io
							    1.redis 非阻塞io解析
								2.netty多路复用    ： https://blog.csdn.net/woaixiaopangniu521/article/details/70279143

								***********  相当于加了一层, 专门来监控是否可操作 ，而不是憨憨的自己去亲历亲为判断
									从流程上来看，使用select函数进行IO请求和同步阻塞模型没有太大的区别，甚至还多了添加监视socket，以及调用select函数的额外操作，效率更差。但是，使用select以后最大的优势是用户可以在一个线程内同时处理多个socket的IO请求。用户可以注册多个socket，然后不断地调用select读取被激活的socket，即可达到在同一个线程内同时处理多个IO请求的目的。而在同步阻塞模型中，必须通过多线程的方式才能达到这个目的。
									IO多路复用模型使用了Reactor设计模式实现了这一机制。
									多路IO复用模型也被称为异步阻塞IO模型  -- 查看上面链接中图 selector线程完成了用户做的轮询
								***********

								io： https://www.codenong.com/cs105455623/
										1.业务逻辑 - java - c++ - c - 操作系统 - 硬件 - 二进制 - 电子元器件 。 
										  有数据传输的地方就有流

										2.字节大小统计 / 字节..高级类型之间转换 <=== 字符集
												1.db插入中类型转换，自定义handler
													 class PostgresFloatArrayTypeHandler extends BaseTypeHandler<Float[]> 
													 Array array = ps.getConnection().createArrayOf("float2", parameter);
													 setNonNullParameter()...

													 MySQL JDBC对每种字段类型，都有相应的Java类型与之对应，也可以转换为其他Java类型。但这种转换还不够灵活，如TIMESTAMP与java.util.Date就转换不了，只能人工转换。这里推荐使用MyBatis，它内置了许多TypeHander，支持各种基础数据类型间的转换（xxxTypeHandler），也支持自定义数据类型转换。


												2.评估db返回 / 内存占用 / 网络传输 占用字节数
													  长度 * 返回条数 = 数据占用大小


											    3.序列化/反序列化 - 几种不同框架效果 从压缩比/cpu损耗/带宽占用/易读化 - json 来比较
											    				 - 从内存到磁盘落地/网络 -- 传输化

										3.NIO和传统的IO有什么区别？
												1.同步阻塞   ： 排队打饭
												  同步非阻塞  ：点饭后干其他事，等叫号，自己来取    自己来操作就是 ‘ 同步 ’
												  异步非阻塞  ：点饭后干其他事，服务员端上来        阻塞/非：如果不能读写是否立刻返回而不是等待

												2.NIO: 服务器的实现模式是多个请求一个线程，即请求会注册到多路复用器Selector上，多路复用器轮询到连接有IO请求时才启动一个线程处理。
													   事件机制 + 线程
												  AIO: 服务器的实现模式为多个有效请求一个线程，客户端的IO请求都是由OS先完成再通知服务器应用去启动线程处理（回调）
										
										4.被高层包装
										5.如何实现对象克隆？ 深度克隆 - 不同工具类

								
								2.传输 - 压缩 / 批处理
								3.零copy
								4.顺序写入
								5.分段存储

				2.sql
						0.mybatis - druid - sql 
								1.哪些逻辑放到db层，动态sql来处理 ，如何使查询逻辑合理前提下最优,
								2.sql本身分层 select xxx from xxx where xxx join...order ..limit ...
											 1.sql逻辑是否在脏数据下正常处理，严谨性
											 2.将每个segment都独立成块处理 使用<include...> 提高复用 
											 3.表动态化 $() ,返回值的extends，返回属性由前台传入

											 MockFramework.TableDesign 表创建 - 8步走 

								3.sql级函数，减少返回数据处理逻辑，是否要呢？还是说将 ‘函数逻辑’放到代码层？==该函数是否会对数据量和性能进行权衡
											1.取交并集 	
													1.join / left join 
													2.Union / Union All / Intersect / Minus 两个不同 ‘ 结果集 ’进行处理
										    
										    2.函数 - 统计/救急  - https://www.jianshu.com/p/32bc449a1bf6

										    	数学函数
												字符串函数 //mysql中处理字符串时，默认第一个字符下标为1，即参数position必须大于等于1
													concat(s1,s2) s1可以是当前表的某个字段，表示拼接到该字段内容后面
												日期和时间函数
												条件判断函数
												系统信息函数
												加密函数
												格式化函数

								4.自带的慢查询日志或者开源的慢查询系统定位到具体的出问题的SQL，然后使用explain、profile等工具来逐步调优,索引构建和使用

											1.db索引
													Search.mysqlTech
											2.db配置 - 连接数
				3.网络 - 分布式
						1.nettyTech
						2.传输 - 压缩(谁是瓶颈就处理谁)/ 批处理 
			



				4.搜索  --- 有些db无法加速的场景可以通过搜索相关技术对返回数据加工处理
						0.搜索引擎架构：https://www.processon.com/view/60588889e401fd4c038cea7f
						  搜索流程： https://www.processon.com/view/5c85fe84e4b0c996d35df889
						  			https://www.processon.com/view/5c638745e4b056ae2a072650
						  			https://www.processon.com/view/572852cde4b0d554ee679344
						  			https://www.processon.com/view/56d520a5e4b0a3f94621f178
						  			https://www.processon.com/view/565bc459e4b017e0bd1ac03d
						  			https://www.processon.com/view/5e025263e4b06f72408dda19#map

						1.大数据搜索引擎原理分析及编程实现 https://www.processon.com/view/5e5b9940e4b0cb56dab1bb85#map
						  搜索优化：https://www.processon.com/view/5f70bb1ee401fd64b5df262f#map
						  多模态搜索:https://www.processon.com/view/561f6eb6e4b088376d460430
						  聚合：https://www.processon.com/view/600e6e95f346fb6aa74a1f32

						2.Search.searchTech	  / esTech

						3.机器学习
								1.K-means：  https://zhuanlan.zhihu.com/p/78798251
								2.rerank  :  https://zhuanlan.zhihu.com/p/103000686   ReIDReRankManager.java <== todo:
								3.拉伸- 平滑 : https://zhuanlan.zhihu.com/p/27951938    考虑多种因素，比如价格，库存，评分，销量，经纬度综合评分


				5.大规模数据处理--流处理+函数式编程----> lambda对 ‘ 大型集合 ’ 简化 和 ‘ 并发 ’ 处理api
						0.函数式编程的特点： 分离关注点  -- 相对于工具类，这类适合 函数式 的方法其实对于业务更贴近，不会一成不变。比如局部搜sort/..sort 
								1.组合式编程、不变性
								2.较多数学概念
								3.泛型是对类的向上抽象，函数是对方法的向上抽象 Predicate / Student findAll(final Predicate<Student> predicate){
										从byName -- byNo ==>  动作和条件 
										类泛型可以作为成员，方法入参；方法泛型可以作为方法 extends / super 

								4.结构化编程参数类型是：类-结构化对象  函数式编程参数类型是：动作(test)-函数式接口,将方法独立化不在依附于实体，更加灵活，类似于工具类
													  函数式编程一个有趣的地方就在于这些构造块可以组合起来，这一点和面向对象是类似的，都是由基础的构造块逐步组合出来的
										函数式切分的是动词，面向对象切分的是名词。

								参考自：https://juejin.cn/post/6844903892166148110  + function使用.png 
								函数式接口有哪些?  == BiConsumer、BiFunction、BiPrediate / 操作基本数据类型的 IntConsumer、IntFunction
										1.predicate     test negate and / or --boolean test = predicate1.and(predicate2).test("&&测试"); 最后才调用test   
										2.Function     andThen  compose //Integer apply3 = function1.andThen(function2).apply(3); 先拿3执行functino1,在function2 compose和这个相反
										3.Supplier
										3.Consumer		andThen  consumer1.andThen(consumer2).accept(string);

										注意这些接口中默认方法

								函数式接口定义:有且只有一个抽象方法的接口被称为函数式接口,一定要确保接口中有且只有一个抽象方法，这样Lambda才能顺利的进行推导
											  static / default方法


								演进过程：
									
										//最后以  终结操作 为止,
										        System.out.println(IntStream.generate(() -> 1).filter(((IntPredicate) value -> value == 1).and((value) -> value > 1 )).findFirst().getAsInt());

										//这些都是封装好的,所以参数是固定的，无法通过继承，因为继承会造成 ‘ 非一个方法 ’冲突
										//        IntStream.generate(() -> 1).filter(new)
										        int ii = 1;
										        System.out.println(test(v -> v > 1));
										    }


										//高阶函数 - 组织函数调用逻辑 比如 filter - map - group by - count ....
										//这个方法谁来调用？ --    1.传递为 this ? -- 将IsFastFunction具体逻辑操作抛给用户，或者说抛给别人
										//                      2. test(xxx,Function xxx) 传入参数

										//上面的stream是在  函数式基础上添加了 ’ 类型推断 ‘,所以无需向其他普通函数式传入还是需要手动调用.apply..isFast方法的 , 集合的 ’ 并发 ‘
										    public static boolean test(IsFastFunction isFast){
										        int i = 0+1;
										        int j = i+1;
										//        return i+j >1;
										        return isFast.isFast(i+j);
										        //return isf...(this)
										    }
										}

										//为了区分普通接口和函数式接口，命名和注解
										//函数式脱离了具体类更加灵活，可以复用。相对于工具类有 ’ 参数接口显示更加直观表示处理逻辑 ‘
										@FunctionalInterface
										  interface IsFastFunction{
										    Boolean isFast(int v);
										}


								特点
										组合性 -- 上面的演变过程
											1.高阶函数 find(byName(name).and(bySno(sno))); 将函数作为参数，代表：可以传递行为，而高阶函数中有这些行为的更高逻辑，比如and / or /... <===普通面向对象同样可以封装转化为函数式编程 <==
											2.能把模型拆解成多个可以组合的构造块，这个过程非常考验人的洞察力，也是“分离关注点”的能力

											===> 比如stream流编程中的filter map reduce这些的参数都是 ‘ 函数式接口 - 方法’ ，所以这些高阶函数组成了类似db list的操作，更高层次的抽象而不是具体
											1.列表转换思维：大部分操作最后都可以归结成列表转换，也就是说，数据经过一系列的列表转换会得到一个结果
											2.我们在编程之初就熟悉了 if、for 之类的写法。如果你同样熟悉函数式编程的基础设施


										不变性 - 约束

											1.把值和纯函数合起来看，值保证不会显式改变一个量，而纯函数保证的是，不会隐式改变一个量 == 不会因为输入的不同而有不同操作
												对于相同的输入，给出相同的输出；没有副作用；当时候需求变了，则只需要改变输入即可
											2.即便是在多线程的情况下，我们也不必考虑同步的问题 -- 因为相比于simpledataformat这种方法调用，虽然在方法中调用，由于底层 ‘ 公共成员 ’存在逻辑，导致了内部 ‘ 变化 ’，而这种变化在 多线程下是不安全的。 而对于函数式，类似于本身就是只有方法没有成员，所以说它本身就是不会收到 ‘多线程影响的’
											3.传统的编程方式占优的地方是执行效率，而现如今，这个优点则越来越不明显，反而是因为到处可变而带来了更多的问题。相较之下，我们更应该在现在的设计中，考虑借鉴函数式编程的思路，把不变性更多地应用在我们的代码之中
													1.编写不变类，就是对象一旦构造出来就不能改变
															所有的字段只在构造函数中初始化；所有的方法都是纯函数；如果需要有改变，返回一个新的对象，而不是修改已有字段。
															纯函数的重点是，不修改任何字段，也不调用修改字段内容的方法。

										惰性求值
											1.惰性求值（Lazy Evaluation）是一种求值策略，它将求值的过程延迟到真正需要这个值的时候。惰性求值的好处就在于可以规避一些不必要的计算，尤其是规模比较大，或是运行时间比较长的计算
											2.Proxy 模式，它就是采用了惰性求值的策略，把一些消耗很大的计算延迟到不得不算的时候去做。还有 Singleton 模式有时也会采用惰性求值的策略，在第一次访问的时候，再去生成对象

										无限流 - 怎么可能会有无限长的集合呢？内存也存不下啊？如果你这么想的话，说明你的思路还是传统的方式。无限长集合中的元素并不是预置进去的，而是在需要的时候，才计算出来的。14verify(function).apply(jack);
											1.无限长集合真正预置进去的是，元素的产生规则。
											2.这样一来，元素就会像流水一样源源不断地产生出来，我们将这种集合称为无限流（Infinite Stream）。
												Stream.iterate(1, number -> number + 1)
												像 map 和 filter 这一类的就是中间操作，而像 reduce 一类的就属于终结操作。只有终结操作才需要我们给出一个结果，所以，只有终结操作才会引起真正的计算。 <===?如何理解？
												它有什么用呢？如果你对无限流有了认识，很多系统的设计都可以看作成一个无限流。比如，一些大数据平台，它就是有源源不断的数据流入其中，而我们要做的就是给这个无限流提供各种转换，你去看看现在炙手可热的Flink，它使用的就是这种思路。

										记忆
											1.惰性代表为了避免耗资源操作，所以将结果缓存起来，记忆
											atomicRefrence实现记忆.png 

										Optional 
											1.是一个对象容器，其中可能包含着一个非空的值，也可能不包含。你可以简单地把它理解成一个对象容器。容错容器
											2.构建
													Optional.of("Hello"); // 创建一个Optional对象，其中包含了"Hello"字符串
													Optional.empty(); // 创建了一个表示空对象的Optional对象。
													Optional.ofNullable(instance); // 创建了一个Optional对象，不知instance是否为空。

													嵌套多层如何通过optional来避免判空操作？
														一个orElse/orThrowabel就代表了所有操作过程中为null异常的情况，一旦遇到直接跳到这里给默认值或者异常，不会往下走了


											3.例子
											public class OptionalTest {

												    public static void main(String[] args) {
												        Test1();
												    }


												    public  static void Test1() {
												        // 正常情况，都不为null,都可以正常执行
												        User user = User.builder().address( Address.builder()
												                .country( Country.builder().countryName( "nj" )
												                        .build() )
												                .build() )
												                .build();

												        // user为null
												//        user = null;
												//
												//        // Address 为null
												//        user = User.builder().address( null ).build();
												//
												        // country 为null
												        user = User.builder().address( Address.builder()
												                .country( null ).build() ).build();

												        OptTest( user );

												    }

												    public static void  OptTest(User user) {

												//        // 第一种方式：存在空指针的风险，只要与一个对象为空就会空指针
												//        String countryName = user.getAddress().getCountry().getCountryName();
												//        System.out.println( "第一种方式：" + countryName );
												//
												//        // 第二种方式：各种if判断避免了空指针，但是if层级太深，代码冗长
												//        if (user != null) {
												//            Address address = user.getAddress();
												//            if (address != null) {
												//                Country country = address.getCountry();
												//                if (country != null) {
												//                    String couName = country.getCountryName();
												//                    System.out.println( "第二种方式：" + couName );
												//                }
												//            }
												//        }

												        // 第三种方式：代码简洁，避免空指针,无论那一步为空都会返回默认值
												        String counName = Optional.ofNullable( user )
												                .map( User::getAddress )                                        //对比Optional.map和Stream.map  flatmap差别最大，stream中是平铺
												                .map( Address::getCountry )                     //注意这里隐藏了return 操作 ; 自动封装了optional ; optional可以转为stream操作
												                .map( Country::getCountryName )
												                .orElse( "china" );                                       //中间任何一步为null,则 ’流程直接跳到这里‘，所以说这里get的就是最后的返回值
												        System.out.println( "第三种方式：" + counName );

												        // 第三种方式：代码简洁，避免空指针,无论那一步为空都会返回自定义异常
												        String countryNameEx = Optional.ofNullable( user )
												                .map( User::getAddress )
												                .map( Address::getCountry )
												                .map( Country::getCountryName )
												                .orElseThrow( () -> new RuntimeException( "第四部异常验证！" ) );
												        System.out.println( "第四种方式：" + countryNameEx );


												        //ifPresent
												        Optional.ofNullable("sss").map(String::toUpperCase).filter(String::isEmpty).filter(v -> v.equals("ss"))
												                .ifPresent(v -> System.out.println(v));


												        //结合函数式编程
												        Predicate<String> len6 = pwd -> pwd.length() > 6;
												        Predicate<String> len10 = pwd -> pwd.length() < 10;
												        Predicate<String> eq = pwd -> pwd.equals("password");
												       boolean result = Optional.ofNullable("sss").map(String::toLowerCase).filter(len6.and(len10).and(eq)).isPresent();


												       //optional对list Stream转化 不是一个概念操作 一个对空值处理，一个是对list
												        List list = Lists.newArrayList("a","b");
												        Optional.ofNullable(list).ifPresent(v -> v.stream().forEach(System.out::print));

												//        Optional.ofNullable(list).
												        list.stream().findAny().orElse("");


												       //什么时候不使用
												       //不要将其用作类中的字段，因为它不可序列化
												       //不要将其用作构造函数和方法的参数，因为这会导致不必要的复杂代码。
												    }

												}

												@Data
												@Builder
												 class User {
												    private Integer userId;

												    private String userName;

												    private Address address;
												}

												@Data
												@Builder
												 class Address {
												    private Integer addressId;

												    private String addressName;

												    private Country country;
												}

												@Data
												@Builder
												 class Country {
												    private Integer countryId;

												    private String countryName;
												}




								面向对象和函数时编程
									我们可以用面向对象编程的方式对系统的结构进行搭建，然后，用函数式编程的理念对函数接口进行设计。你可以把它理解成盖楼，用面向对象编程搭建大楼的骨架，用函数式编程设计门窗
									不同于builder设计模式，builder其实本质还是面向对象编程，并没有面向方法/函数

								优点-特别在大数据处理时
										1.

							3.stream 流式处理
								1. 中间操作 终结操作 api
										1.list.stream().sorted(Comparator.naturalOrder().reversed());
										2.中间操作
											filter
											distinct
											skip
											limit 
											map 
											flatmap
											sorted

											 List<String> strs = Arrays.asList("c", "b", "c");
											 strs.stream().distinct().skip(0).limit(1).map(v -> v+"tow").sorted().forEach(System.out::println);



										终端操作
										  forEach()
										  forEachOrdered() ： forEachOrdered表示严格按照顺序取数据，forEach在并行中，随机排列了；这个也可以看出来，在并行的程序中，如果对处理之后的数据，没有顺序的要求，使用forEach的效率，肯定是要更好的
										  					  strs.parallelStream().forEachOrdered(System.out::print);//abc
										  				   	  strs.parallelStream().forEach(System.out::print);//bca
											  toArray()
											  collect()
											  min()
											  max()
											  count()
											  anyMatch()
											  allMatch()
											  noneMatch()
											  findFirst()
											  findAny()

										  	List<String> strs = Arrays.asList("c", "b", "c");
									        System.out.println(strs.stream().reduce("start", (a, b) -> a + b));  //startcbc
									        System.out.println(strs.stream().collect(Collectors.joining(",", "{", "}")));  //{c,b,c}
									        strs.stream().min(Comparator.naturalOrder()).ifPresent(System.out::println);//b
									        System.out.println(strs.stream().anyMatch(v -> v.equals("a")));//false



								2.：：使用  --- 一个lambda表达式只调用一个已经存在的方法（不做其它）， 所以这才有了方法引用！
										以下是Java 8中方法引用的一些语法：

												静态方法引用（static method）语法：classname::methodname 例如：Person::getAge
												对象的实例方法引用语法：instancename::methodname 例如：System.out::println
												对象的超类方法引用语法： super::methodname
												类构造器引用语法： classname::new 例如：ArrayList::new
												数组构造器引用语法： typename[]::new 例如： String[]:new


				6.池
						1.结合当前使用连接池的原理、具体的连接池监控数据和当前的业务量作一个综合的判断，通过反复的几次调试得到最终的调优参数。
						2.线程池
						3.对象池


				7.架构
						1.读写分离
						2.多从库负载均衡
						3.水平和垂直分库分表
						4.cdn
				8.前端
				   
